{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                             SMART Debugging Routines
--------------------------------------------------------------------------------
 * procedure SmartDebugText(Text: string; Chars, Color, X, Y: Integer);   
     By: Wanted
 * procedure SmartDebugATPABoundsEx(ATPA: T2DPointArray; ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean);
     By: Wanted
 * procedure SmartDebugATPABounds(ATPA: T2DPointArray);
     By: Wanted
 * procedure SmartDebugATPA(ATPA: T2DPointArray);
     By: Wanted
 * procedure SmartDebugTPA(TPA: TPointArray);
     By: Wanted
 * procedure SmartDebugTBA(TBA: TBoxArray);
     By: Wanted 
 * procedure SmartDebugBox(TB: TBox);   
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugText(Text: string; Chars, Color, X, Y: Integer);
Contributors: Wanted
Description: Debugs a line of text to the smart debug canvas.
Date Created: January 22nd, 2012. By Wanted
Last Modified: November 9th, 2013. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugText(Text: string; Chars, Color, X, Y: Integer);
var
  Bmp: TSCARBitmap;
  I, H: Integer;
  TPA: TPointArray;
begin
  Bmp := TSCARBitmap.Create('');
  try
    Bmp.SetSize(RSPW, RSPH);
    Bmp.Clear(0);    
    TPA := TextToTPA(Text, Chars);  
    H := High(TPA);
    for I := 0 to H do
      Bmp.Pixel[TPA[I].X, TPA[I].Y] := Color;
    SmartDebugBitmapEx(SMART_Client, Bmp, X, Y);
  finally
    Bmp.Free;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugATPABoundsEx(ATPA: T2DPointArray; ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean);
Contributors: Wanted
Description: Debugs an ATPA to the smart debug canvas with tons of options.
Date Created: January 22nd, 2012. By Wanted
Last Modified: November 9th, 2013. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugATPABoundsEx(ATPA: T2DPointArray; ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean);
var    
  I, II, H, HH, Col, Arial: Integer;
  Bmp: TSCARBitmap;
  ATPA2: T2DPointArray;
  TPA: TPointArray;
  B: TBox;
begin
  Arial := LoadCharsFromFont2('Arial', 8, True, False, False, False);  
  Bmp := TSCARBitmap.Create('');
  try
    Bmp.SetSize(RSPW, RSPH);
    Bmp.Clear(0);    
    H := High(ATPA);
    SetLength(ATPA2, H + 1);
    for I := 0 to H do
      ATPA2[I] := CopyTPA(ATPA[I]);
    if ((ShowTPAs) or (ShowTPABorders) or (ShowTPAIndexes)) then
    begin
      for I := 0 to H do
      begin
        Col := Random(clWhite + 1);
        HH := High(ATPA2[I]);
        if (ShowTPAs) then
          for II := 0 to HH do
            Bmp.Pixel[ATPA2[I][II].X, ATPA2[I][II].Y] := Col;
        if ((ShowTPABorders) or (ShowTPAIndexes)) then
          Col := Random(clWhite + 1);
        if (ShowTPABorders) then
        begin
          TPA := BoxToTPA(TPABounds(ATPA2[I]), False);
          HH := High(TPA);
          for II := 0 to HH do
            Bmp.Pixel[TPA[II].X, TPA[II].Y] := Col;
        end;
        if (ShowTPAIndexes) then
        begin
          TPA := TextToTPA(IntToStr(I), Arial);
          B := TPABounds(ATPA2[I]);
          OffsetTPA(TPA, B.X1 + 2, B.Y1);
          HH := High(TPA);
          for II := 0 to HH do
            try     
              Bmp.Pixel[TPA[II].X, TPA[II].Y] := Col;
            except
            end;
        end;
      end;
      if (ShowATPABorder) then
      begin
        TPA := BoxToTPA(ATPABounds(ATPA2), False);
        H := High(TPA);
        for I := 0 to H do
          Bmp.Pixel[TPA[I].X, TPA[I].Y] := clBlue;
      end;
    end;
    SmartDebugBitmap(SMART_Client, Bmp);
  finally
    Bmp.Free; 
    try
      FreeChars2(Arial);
    finally
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugATPABounds(ATPA: T2DPointArray);
Contributors: Wanted
Description: Debugs an ATPA to the smart debug canvas with all options enabled.
Date Created: January 22nd, 2012
Last Modified: January 22nd, 2012
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugATPABounds(ATPA: T2DPointArray);
begin
  SmartDebugATPABoundsEx(ATPA, True, True, True, True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugATPA(ATPA: T2DPointArray);
Contributors: Wanted
Description: Debugs an ATPA to the smart debug canvas.
Date Created: January 22nd, 2012
Last Modified: January 22nd, 2012
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugATPA(ATPA: T2DPointArray);
begin
  SmartDebugATPABoundsEx(ATPA, True, True, False, False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugTPA(TPA: TPointArray);
Contributors: Wanted
Description: Debugs a TPA to the smart debug canvas.
Date Created: January 22nd, 2012
Last Modified: January 22nd, 2012
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugTPA(TPA: TPointArray);
begin
  SmartDebugATPA([TPA]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugTBA(TBA: TBoxArray);
Contributors: Wanted
Description: Debugs a TBoxArray to the smart debug canvas.
Date Created: January 22nd, 2012
Last Modified: January 22nd, 2012
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugTBA(TBA: TBoxArray);
var
  ATPA: T2DPointArray;
  I, H: LongInt;
begin
  H := High(TBA);
  SetLength(ATPA, H + 1);
  for I := 0 to H do
    ATPA[I] := [Point(TBA[I].X1, TBA[I].Y1), Point(TBA[I].X2, TBA[I].Y2)];
  SmartDebugATPABoundsEx(ATPA, False, False, True, True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SmartDebugBox(TB: TBox);
Contributors: Wanted
Description: Debugs a TBox to the smart debug canvas.
Date Created: January 22nd, 2012. By Wanted
Last Modified: January 22nd, 2012. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SmartDebugBox(TB: TBox);
begin
  SmartDebugTBA([TB]);
end;