{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Math Routines
--------------------------------------------------------------------------------
 * procedure IncE(var x: Extended; N: Extended);  
 * procedure DecE(var x: Extended; N: Extended);
 * function  Opposite(i: Integer): Integer;         
 * function  Negative(i: Integer): Integer;
 * function  OppositeE(e: Extended): Extended;
 * function  NegativeE(e: Extended): Extended;
 * function  Odd(Value: Integer): Boolean;       
 * function  Even(Value: Integer): Boolean;            
 * function  Difference(value1, value2: Integer): Integer;      
 * function  DifferenceE(value1, value2: Extended): Extended;      
 * function  Compare(v, x: Integer): Integer;    
 * function  CompareE(v, x: Extended): Integer;    
 * function  DecAcc(x: Extended; a: Integer): Extended;
 * function  ValueToPercent(position, source: Extended): Extended; 
 * function  PercentToValue(percent, source: Extended): Extended;
 * function  ValueToFraction(position, source: Extended): Extended; 
 * function  FractionToValue(fraction, source: Extended): Extended;
 * function  InRangeE(value, minimum, maximum: Extended): Boolean;
 * function  RandomBool: Boolean; 
 * function  RandomAbs(Range: Integer): Integer;   
 * function  RandomEx(range, amount: Integer; duplicates: Boolean): TIntArray;
 * function  RR(Min, Max: Integer): Integer;
 * function  RandomRangeAbs(AFrom, ATo: Integer): Integer;   
 * function  RandomRangeEx(aFrom, aTo, amount: Integer; duplicates: Boolean): TIntArray;
 * function  RRectanglePoint(X1, Y1, X2, Y2: Integer): TPoint;
 * function  RCirclePoint(CX, CY, Radius: Integer): TPoint;
 * function  GetAngle(x, y, x2, y2: Integer): Extended; 
 * function  AngleBetweenPointsDegress(P1, P2: TPoint): Extended;
 * function  DistanceEx(X1, Y1, X2, Y2: Extended): Extended;
 * procedure ConstrainBox(var X1, Y1, X2, Y2: Integer; CX1, CY1, CX2, CY2: Integer);
 * procedure ConstrainBoxes(var TBA: TBoxArray; CX1, CY1, CX2, CY2: Integer);
 * function  GenerateSpiral(Center: TPoint; AngStep, DistStep: Extended; X1, Y1, X2, Y2: Integer): TPointArray;
 * function  IntToBin(Value: Integer): string;       
 * function  BinToInt(Value: string): Integer;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure IncE(var x: Extended; N: Extended);
Contributors: Janilabo
Description: Increases the x value by N. Returns the increased value.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure IncE(var x: Extended; N: Extended);
begin
  x := (x + N);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DecE(var x: Extended; N: Extended);
Contributors: Janilabo
Description: Decreases the x value by N. Returns the decreased value.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DecE(var x: Extended; N: Extended);
begin
  if SameValue(x, N) then
  begin         
    x := 0.0;
    Exit;
  end;
  x := (x - N);  
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Opposite(i: Integer): Integer;
Contributors: Janilabo
Description: Returns the number with the opposite sign. e.g. -1 to 1, 1 to -1
Date Created: October 11th, 2012. By Janilabo.
Last Modified: October 11th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Opposite(i: Integer): Integer;
begin
  Result := (i * -1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Negative(i: Integer): Integer;
Contributors: Janilabo
Description: Always Returns the negative number of i, even if i is negative.
Date Created: October 11th, 2012. By Janilabo.
Last Modified: October 11th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Negative(i: Integer): Integer;
begin
  Result := (IAbs(i) * -1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OppositeE(e: Extended): Extended;
Contributors: Janilabo
Description: Returns Extended number with the opposite sign. -1.1 to 1.1, 1.1 to -1.1
Date Created: October 11th, 2012. By Janilabo.
Last Modified: October 11th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OppositeE(e: Extended): Extended;
begin
  Result := (e * -1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function NegativeE(e: Extended): Extended;
Contributors: Janilabo
Description: Always Returns the negative number of e, even if e is negative.
Date Created: October 11th, 2012. By Janilabo.
Last Modified: October 11th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function NegativeE(e: Extended): Extended;
begin
  Result := (Abs(e) * -1);
end;

{$IFNDEF SCAR336_UP}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Odd(Value: Integer): Boolean;
Contributors: Janilabo, Freddy
Description: Returns true if the given value is an odd number.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 17th, 2012. By Freddy.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Odd(Value: Integer): Boolean;
begin
  Result := Value and 1 = 1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Even(Value: Integer): Boolean;
Contributors: Janilabo, Freddy
Description: Returns true if the given value is an even number.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 17th, 2012. By Freddy.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Even(Value: Integer): Boolean;
begin
  Result := Value and 1 = 0;
end;                
  
{$ENDIF}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Difference(value1, value2: Integer): Integer;
Contributors: Janilabo
Description: Returns the difference between value1 and value2.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Difference(value1, value2: Integer): Integer;
begin
  Result := IAbs(value2 - value1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DifferenceE(value1, value2: Extended): Extended;
Contributors: Janilabo
Description: Returns the difference between extended value1 and extended value2.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DifferenceE(value1, value2: Extended): Extended;
begin
  Result := Abs(value2 - value1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Compare(v, x: Integer): Integer;
Contributors: Janilabo
Description: Compares v with x. Results: 0=EQUAL, 1=v>x, -1=v<x
Date Created: October 9th, 2012. By Janilabo.
Last Modified: October 9th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

function Compare(v, x: Integer): Integer;
begin
  if (v <> x) then
    if (v > x) then
      Result := 1
    else
      Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CompareE(v, x: Extended): Integer;
Contributors: Janilabo
Description: Compares v with x. Results: 0=EQUAL, 1=v>x, -1=v<x
Date Created: October 9th, 2012. By Janilabo.
Last Modified: October 9th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

function CompareE(v, x: Extended): Integer;
begin
  if (v <> x) then
    if (v > x) then
      Result := 1
    else
      Result := -1;
end;                         

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DecAcc(x: Extended; a: Integer): Extended;
Contributors: Janilabo
Description: Decimal accuracy according the amount of decimal places (significance)
Date Created: October 11th, 2012. By Janilabo.
Last Modified: October 11th, 2012. By Janilabo.
Explanation: Returns x with decimal accuracy of a. Examples below with '123.456789'.
               a=0    a=1     a=2       a=3       a=4         a=5     etc.
               123   123.4   123.45   123.456   123.4567   123.45678                  
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DecAcc(x: Extended; a: Integer): Extended;
var
  d: Extended;
  z: Boolean;
begin
  Result := Int(x);
  if (a > 0) then
  begin
    d := DecRet(x);
    z := (d < 0.1);
    if z then
      d := (d + 0.1);
    try
      Result := (Result + StrToFloat('.' + Copy(FloatToStr(d), 3, a)));
    except
    end;
    if z then
      Result := (Result - 0.1);
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ValueToPercent(position, source: Extended): Extended;
Contributors: Janilabo
Description: Returns position percent (%) from source.      
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ValueToPercent(position, source: Extended): Extended;
begin
  if (position <> 0) then
    Result := ((position / source) * 100);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function PercentToValue(percent, source: Extended): Extended;
Contributors: Janilabo
Description: Returns value from source by percent.      
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function PercentToValue(percent, source: Extended): Extended;
begin
  if (percent <> 0) then
    Result := ((percent / 100) * source);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ValueToFraction(position, source: Extended): Extended;
Contributors: Janilabo
Description: Returns position fraction from source.                
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ValueToFraction(position, source: Extended): Extended;
begin
  if (position <> 0) then
    Result := (position / source);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FractionToValue(fraction, source: Extended): Extended;
Contributors: Janilabo
Description: Returns value from source by fraction.                
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FractionToValue(fraction, source: Extended): Extended;
begin
  if (fraction <> 0) then
    Result := (fraction * source); 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InRangeE(value, minimum, maximum: Extended): Boolean;
Contributors: Janilabo
Description: Returns true if value is equal-to/betw. minimum and maximum extended.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InRangeE(value, minimum, maximum: Extended): Boolean;
begin
  Result := ((value >= minimum) and (value <= maximum));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomBool: Boolean; 
Contributors: Janilabo
Description: Random() with support for negative Range.
Date Created: October 25th, 2012. By Janilabo.
Last Modified: October 25th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomBool: Boolean; 
begin
  Result := (Random(2) = 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomAbs(Range: Integer): Integer;
Contributors: Janilabo
Description: Random() with support for negative Range.
Date Created: October 21st, 2012. By Janilabo.
Last Modified: October 21st, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomAbs(Range: Integer): Integer;
begin
  if (Range <> 0) then
    if (Range > 0) then
      Result := Random(Range)
    else
      Result := (Random(IAbs(Range)) * -1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomEx(range, amount: Integer; duplicates: Boolean): TIntArray;
Contributors: Janilabo
Description: Generates an array of random numbers from 0 to (Range - 1).
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
Explanation: Amount is the size of the array.
             If duplicates is set as true, the values wont be unique to each other.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomEx(range, amount: Integer; duplicates: Boolean): TIntArray;
var
  r, i, n: Integer;
begin
  if (amount > 0) then
  case duplicates of
    True:
    begin                           
      SetLength(Result, amount);
      for i := 0 to (amount - 1) do
        Result[i] := Random(range);   
    end;
    False:
    if ((range <> 0) and (range <> 1)) then
    begin  
      if (range > 1) then
        if (amount > IAbs(range - 0)) then 
          amount := IAbs(range - 0);
      for r := 0 to (amount - 1) do
        repeat                
          n := Random(range); 
          if not TIAContains(Result, n) then
            i := TIAAppend(Result, n);
        until (i >= r);    
    end else
      Result := [0];
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RR(Min, Max: Integer): Integer;
Contributors: Freddy, Wanted.
Description: Outputs a value within a range.
Date Created: September 22nd, 2011. By Wanted
Last Modified: November 3rd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RR(Min, Max: Integer): Integer;
{$IFDEF NoVariance}
  begin
    Result := RandomRange(Min, Max);
  end;
{$ELSE}
  var
    Origin, Rand: Integer;
  begin
    Origin := ((Min + Max) div 2);
    Rand := RandomG(Floor(Abs(Max - Origin)), OSI_Variance);
    case (Random(2)) of
      0: Result := Origin - Rand;
      1: Result := Origin + Rand;
    end;
  end;
{$ENDIF}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomRangeAbs(AFrom, ATo: Integer): Integer;
Contributors: Janilabo
Description: RandomRange() with support for negative AFrom / ATo.
Date Created: October 21st, 2012. By Janilabo.
Last Modified: October 21st, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomRangeAbs(AFrom, ATo: Integer): Integer;
var
  r: Integer;
begin
  if (AFrom > ATo) then
    Swap(AFrom, ATo);
  r := (ATo - AFrom);
  if (r < 0) then
    Result := ((Random(IAbs(r)) + AFrom) * -1)
  else
    Result := (Random(r) + AFrom);
end;  

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomRangeEx(aFrom, aTo, amount: Integer; duplicates: Boolean): TIntArray;
Contributors: Janilabo
Description: Generates an array of random numbers from aFrom to aTo.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo.
Explanation: Amount is the size of the array.
             If duplicates is set as true, the values wont be unique to each other.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomRangeEx(aFrom, aTo, amount: Integer; duplicates: Boolean): TIntArray;
var
  a, d, e, m, n, r, i, t: Integer;
  tmp: TIntArray;
  b: Boolean;
begin
  if (amount > 0) then
  case duplicates of
    False:
    begin
      if (aFrom > aTo) then
        Swap(aFrom, aTo);     
      a := IAbs(aTo - aFrom);
      if (a < amount) then
        amount := a; 
      if (amount < 1) then
        Result := [aFrom]
      else
        case (amount < 20000) of
          True:
          for r := 0 to (amount - 1) do
            repeat  
              n := RandomRange(aFrom, aTo);
              if not TIAContains(Result, n) then
                i := TIAAppend(Result, n);
            until (i >= r);
          False:
          begin     
            SetLength(Result, amount);
            m := IAbs(aFrom - aTo); 
            if (m > 10) then
              b := (m > Trunc(amount * 1.1));
            case b of
              True:
              begin          
                d := (Trunc(m / amount) + 3); 
                e := aFrom;
                for i := 0 to (amount - 1) do
                begin                            
                  r := Random(d);         
                  IncEx(e, r);      
                  IncEx(t, (r + 1));
                  Result[i] := (e + i); 
                  Swap(Result[Random(i)], Result[Random(i)]);         
                  d := (Trunc(((m - t) / (amount - i))) * 2); 
                end;
                for i := 0 to (amount div 2) do
                  Swap(Result[Random(amount)], Result[Random(amount)]);
              end;
              False: 
              begin     
                SetLength(tmp, (aTo - aFrom));
                for i := aFrom to (aTo - 1) do
                  tmp[(i - aFrom)] := i;      
                for i := 0 to (amount - 1) do
                begin   
                  r := Random((aTo - aFrom) - i);  
                  Result[i] := tmp[r];   
                  Delete(tmp, r, 1);
                end;
                SetLength(tmp, 0);
              end;
            end;                        
          end;                     
        end;   
    end;
    True:   
    begin 
      SetLength(Result, amount);
      for i := 0 to (amount - 1) do
        Result[i] := RandomRange(aFrom, aTo);
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RRectanglePoint(X1, Y1, X2, Y2: Integer): TPoint;
Contributors: Freddy, Wanted.
Description: Outputs a random point within a rectangle.
Date Created: September 18th, 2011. By Wanted
Last Modified: September 27th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RRectanglePoint(X1, Y1, X2, Y2: Integer): TPoint;
begin
  {$IFDEF NoVariance}
    Result := RndBoxPoint(Box(X1, Y1, X2, Y2));
  {$ELSE}
    Result := RndBoxPointG(Box(X1, Y1, X2, Y2), OSI_Variance);
  {$ENDIF}
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RCirclePoint(CX, CY, Radius: Integer): TPoint;
Contributors: Freddy, Wanted, Zyt3x.
Description: Outputs a random point within a circle.
Date Created: September 4th, 2011. By Wanted & Zyt3x.
Last Modified: September 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RCirclePoint(CX, CY, Radius: Integer): TPoint;
begin
  {$IFDEF NoVariance}
    Result := RndCirclePoint(CX, CY, Radius);
  {$ELSE}
    Result := RndCirclePointG(CX, CY, Radius, OSI_Variance);
  {$ENDIF}
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetAngle(pt1, pt2: TPoint): Extended;
Contributors: Janilabo
Description: Calculates the angle of pt1 and pt2 coordinates.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetAngle(pt1, pt2: TPoint): Extended;
begin
  Result := ((ArcTan2((pt2.Y - pt1.Y), (pt2.X - pt1.X)) * (180 / Pi)) + 90);
  if (Result < 0.0) then
    Result := (Result + 360.0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function AngleBetweenPointsExDegress(P1, P2: TPoint): Extended;
Contributors: Wanted
Description: Calculates the relative angle between two points in degrees.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modified: October 28th, 2011. By Wanted. RS2 Build 671.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function AngleBetweenPointsExDegress(P1, P2: TPoint): Extended;
begin
  Result := Degrees(ArcTan2(P1.Y - P2.Y, P1.X - P2.X));
  {$IFDEF RS2}
    Result := Result + 90.0;
  {$ENDIF}
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DistanceEx(X1, Y1, X2, Y2: Extended): Extended;
Contributors: Wanted.
Description: Returns the exact distance
Date Created: September 30th, 2012. By Wanted.
Last Modified: September 30th, 2012. By Wanted.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DistanceEx(X1, Y1, X2, Y2: Extended): Extended;
begin
  Result := (Sqrt(Sqr(X1 - X2) + Sqr(Y1 - Y2)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ConstrainBox(var X1, Y1, X2, Y2: Integer; CX1, CY1, CX2, CY2: Integer);
Contributors: Wanted
Description: Makes the edges of your box within the edges of another box.
Date Created: December 6th, 2011. By Wanted
Last Modified: December 6th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ConstrainBox(var X1, Y1, X2, Y2: Integer; CX1, CY1, CX2, CY2: Integer);
begin
  if (X1 < CX1) then
    X1 := CX1;
  if (Y1 < CY1) then
    Y1 := CY1;
  if (X2 > CX2) then
    X2 := CX2;
  if (Y2 > CY2) then
    Y2 := CY2;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ConstrainBoxes(var TBA: TBoxArray; CX1, CY1, CX2, CY2: Integer);
Contributors: Wanted
Description: Makes the edges of your boxes within the edges of another box.
Date Created: December 6th, 2011. By Wanted
Last Modified: December 6th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ConstrainBoxes(var TBA: TBoxArray; CX1, CY1, CX2, CY2: Integer);
var
  I, H: Integer;
begin
  H := High(TBA);
  for I := 0 to H do
    ConstrainBox(TBA[I].X1, TBA[I].Y1, TBA[I].X2, TBA[I].Y2, CX1, CY1, CX2, CY2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GenerateSpiral(Center: TPoint; AngStep, DistStep: Extended; X1, Y1, X2, Y2: Integer): TPointArray;
Contributors: Wanted
Description: Out puts some of the pixels in a spiral incrementing based on AngStep and DistStep.
Date Created: November 28th, 2011. By Wanted
Last Modified: December 1st, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GenerateSpiral(Center: TPoint; AngStep, DistStep: Extended; X1, Y1, X2, Y2: Integer): TPointArray;
var
  Ang, Dist: Extended;
  RP: TPoint;
  L: Integer;
begin
  if (Center.X = 0) then
    if (Center.Y = 0) then
  Center := Point((X1 + X2) div 2, (Y1 + Y2) div 2);
  Result := [];
  L := 0;
  Ang := 0;
  Dist := 0;
  repeat
    RP := RotatePoint(Point(Round(Center.X + Dist), Center.Y), Center, Radians(Ang));
    if (not (PointInBox(RP, Box(X1, Y1, X2, Y2)))) then
      Break;
    Inc(L);
    SetLength(Result, L);
    Result[L - 1] := RP;
    Ang := Ang + AngStep;
    Dist := Dist + DistStep;
    if (Ang > 360) then
      Ang := Ang - 360;
  until (False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function IntToBin(Value: Integer): string;
Contributors: Freddy
Description: Translates an integer into its Binary bit equivalent
Date Created: September 9th, 2012. By Freddy.
Last Modified: September 9th, 2012. By Freddy.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function IntToBin(Value: Integer): string;
begin
  Result := '';
  while Value > 0 do
  begin           
    if Boolean(Value and 1) then
      Result := '1' + Result
    else
      Result := '0' + Result;     
    Value := Value shr 1;
  end; 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BinToInt(Value: string): Integer;
Contributors: Freddy
Description: Translates a string of binary numbers to its Integer equivalent
Date Created: September 9th, 2012. By Freddy.
Last Modified: September 9th, 2012. By Freddy.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
 
function BinToInt(Value: string): Integer;
var
  I, L: Integer;
begin
  Result := 0;
  L := Length(Value);
  for I := 1 to L do
  begin
    Result := Result shl 1;
    if Value[I] = '1' then
      Result := Result or 1;
  end;
end;