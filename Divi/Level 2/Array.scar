{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Array Routines
--------------------------------------------------------------------------------
 * procedure TSAInsert(var arr: TStrArray; index: Integer; s: string); 
 * procedure TEAInsert(var arr: TExtArray; index: Integer; float: Extended);
 * procedure TBAInsert(var TBA: TBoxArray; index: Integer; bx: TBox);  
 * procedure TBoAInsert(var arr: TBoolArray; index: Integer; bool: Boolean);
 * procedure TVAInsert(var arr: TVariantArray; index: Integer; item: Variant);
 * function  TSAContains(arr: TStrArray; x: string): Boolean;
 * function  TEAContains(arr: TExtArray; x: Extended): Boolean;
 * function  TBAContains(TBA: TBoxArray; bx: TBox): Boolean;           
 * function  TBoAContains(arr: TBoolArray; x: Boolean): Boolean;
 * procedure TSAAppend(var arr: TStrArray; x: string);                 
 * procedure TEAAppend(x: Extended; var arr: TExtArray);          
 * procedure TBoAAppend(var arr: TBoolArray; x: Boolean);                 
 * procedure TVAAppend(var arr: TVariantArray; x: Variant);
 * function  TSADelete(var arr: TStrArray; x: Integer): Boolean;
 * procedure TSADeleteEx(var arr: TStrArray; x: TIntArray);            
 * function  TEADelete(var arr: TExtArray; x: Integer): Boolean;
 * function  TBADelete(var TBA: TBoxArray; x: Integer): Boolean;       
 * function  TBoADelete(var arr: TBoolArray; x: Integer): Boolean;        
 * function  TVADelete(var arr: TVariantArray; x: Integer): Boolean;        
 * procedure TSACopy(source: TStrArray; var target: TStrArray; resetTarget: Boolean);
 * function  TSACopyEx(arr: TStrArray; pos1, pos2: Integer): TStrArray;
 * procedure TEACopy(source: TExtArray; var target: TExtArray; resetTarget: Boolean);
 * function  TEACopyEx(arr: TExtArray; pos1, pos2: Integer): TExtArray;
 * function  TBACopyEx(TBA: TBoxArray; pos1, pos2: Integer): TBoxArray;
 * procedure TBoACopy(source: TBoolArray; var target: TBoolArray; resetTarget: Boolean);
 * function  TBoACopyEx(arr: TBoolArray; pos1, pos2: Integer): TBoolArray;
 * procedure TVACopy(source: TVariantArray; var target: TVariantArray; resetTarget: Boolean);
 * function  TVACopyEx(arr: TVariantArray; pos1, pos2: Integer): TVariantArray; 
 * procedure TSAUnique(var arr: TStrArray);                                 
 * procedure TEAUnique(var arr: TExtArray);          
 * procedure TBAUnique(var TBA: TBoxArray);      
 * function  TSASame(arr1, arr2: TStrArray): Boolean;                       
 * function  TEASame(arr1, arr2: TExtArray): Boolean;
 * function  TBASame(TBA1, TBA2: TBoxArray): Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
             
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSAInsert(var arr: TStrArray; index: Integer; s: string);
Contributors: Janilabo
Description: Inserts s (string) at index in arr (array of strings)                    
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSAInsert(var arr: TStrArray; index: Integer; s: string);
var
  i, l: Integer;
begin
  l := Length(arr);
  SetLength(arr, (l + 1));
  if (index < 0) then
    index := 0;
  if (index > l) then
    index := l;
  if (l > index) then
    for i := (l - 1) downto index do
      arr[(i + 1)] := arr[i];
  arr[index] := s;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TEAInsert(var arr: TExtArray; index: Integer; float: Extended);
Contributors: Janilabo
Description: Inserts float into arr (TExtendedArray) at index                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TEAInsert(var arr: TExtArray; index: Integer; float: Extended);
var
  i, l: Integer;
begin
  l := Length(arr);
  SetLength(arr, (l + 1));    
  if (index < 0) then
    index := 0;
  if (index > l) then
    index := l;
  if (l > index) then
    for i := (l - 1) downto index do
      arr[(i + 1)] := arr[i];
  arr[index] := float; 
end;
                   
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBAInsert(var TBA: TBoxArray; index: Integer; bx: TBox);
Contributors: Janilabo
Description: Inserts bx to index position of TBA.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBAInsert(var TBA: TBoxArray; index: Integer; bx: TBox);
var
  i, l: Integer;
begin
  l := Length(TBA);
  SetLength(TBA, (l + 1));    
  if (index < 0) then
    index := 0;
  if (index > l) then
    index := l;
  if (l > index) then
    for i := (l - 1) downto index do
      TBA[(i + 1)] := TBA[i];
  TBA[index] := bx; 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBoAInsert(var arr: TBoolArray; index: Integer; bool: Boolean);
Contributors: Janilabo
Description: Inserts bool to arr using index as the position.          
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBoAInsert(var arr: TBoolArray; index: Integer; bool: Boolean);
var                     
  i, l: Integer;
begin
  l := Length(arr);
  SetLength(arr, (l + 1));    
  if (index < 0) then
    index := 0;
  if (index > l) then
    index := l;
  if (l > index) then
  for i := (l - 1) downto index do
    arr[(i + 1)] := arr[i];
  arr[index] := bool; 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TVAInsert(var arr: TVariantArray; index: Integer; item: Variant);
Contributors: Janilabo
Description: Inserts item (Variant) at index in arr (TVariantArray)    
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TVAInsert(var arr: TVariantArray; index: Integer; item: Variant);
var
  i, l: Integer;
begin
  l := Length(arr);
  SetLength(arr, (l + 1));    
  if (index < 0) then
    index := 0;
  if (index > l) then
    index := l;
  if (l > index) then
    for i := (l - 1) downto index do
      arr[(i + 1)] := arr[i];
  arr[index] := item;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TSAContains(arr: TStrArray; x: string): Boolean;
Contributors: Janilabo
Description: Returns true if x is in arr (array of string) at one of its indexs                                  
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TSAContains(arr: TStrArray; x: string): Boolean;
var
  i, h: Integer;
begin
  h := High(arr);
  if (h > -1) then
    for i := 0 to h do
    begin
      Result := (x = arr[i]);
      if Result then
        Exit;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TEAContains(arr: TExtArray; x: Extended): Boolean;
Contributors: Janilabo
Description: Returns true if arr (TExtendedArray) contains x value.                                                                                
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TEAContains(arr: TExtArray; x: Extended): Boolean;
var
  i, h: Integer;
begin
  h := High(arr);
  for i := 0 to h do
  begin
    Result := (x = arr[i]);
    if Result then
      Exit;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAContains(TBA: TBoxArray; bx: TBox): Boolean;
Contributors: Janilabo
Description: Returns true if TBA contains bx.                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAContains(TBA: TBoxArray; bx: TBox): Boolean;
var
  i, h: Integer;
begin
  h := High(TBA);
  for i := 0 to h do
    if ((bx.x1 = TBA[i].x1) and (bx.y1 = TBA[i].y1) and
        (bx.x2 = TBA[i].x2) and (bx.y2 = TBA[i].y2)) then
    begin
      Result := True;
      Exit;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoAContains(arr: TBoolArray; x: Boolean): Boolean;
Contributors: Janilabo
Description: Returns true if x is found in arr (arr contains x).          
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoAContains(arr: TBoolArray; x: Boolean): Boolean;
var
  i, h: Integer;
begin
  h := High(arr);
  for i := 0 to h do
  begin
    Result := (x = arr[i]);
    if Result then
      Exit;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSAAppend(var arr: TStrArray; x: string);
Contributors: Janilabo
Description: Appends x (string) to the arr (array of string)                                  
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSAAppend(var arr: TStrArray; x: string);
var
  aL: Integer;
begin
  aL := (Length(arr) + 1);
  SetLength(arr, aL);
  arr[(aL - 1)] := x;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TEAAppend(x: Extended; var arr: TExtArray);
Contributors: Janilabo
Description: Appends x (Extended) to arr (TExtendedArray)                                                                                
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TEAAppend(x: Extended; var arr: TExtArray);
var
  aL: Integer;
begin
  aL := (Length(arr) + 1);
  SetLength(arr, aL);
  arr[(aL - 1)] := x;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBoAAppend(var arr: TBoolArray; x: Boolean);
Contributors: Janilabo
Description: Appends arr with x (adds x to arr).              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBoAAppend(var arr: TBoolArray; x: Boolean);
var        
  aL: Integer;
begin
  aL := (Length(arr) + 1);
  SetLength(arr, aL);
  arr[(aL - 1)] := x;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TVAAppend(var arr: TVariantArray; x: Variant);
Contributors: Janilabo
Description: Appends x (variant) to arr (TVariantArray).     
Date Created: October 5th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TVAAppend(var arr: TVariantArray; x: Variant);
var
  aL: Integer;
begin
  aL := (Length(arr) + 1);
  SetLength(arr, aL);
  arr[(aL - 1)] := x;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TSADelete(var arr: TStrArray; x: Integer): Boolean;
Contributors: Janilabo, LordJashin
Description: Deletes index in arr (array of string) at x, returns true if succeded                                  
Date Created: September 30th, 2012. By Janilabo
Last Modified: October 5th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TSADelete(var arr: TStrArray; x: Integer): Boolean;
begin
  Result := ((x < (High(arr) + 1)) and (x > -1));
  if Result then
    Delete(arr, x, 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSADeleteEx(var arr: TStrArray; x: TIntArray);
Contributors: Janilabo
Description: Deletes indexs in arr (array of string) if exist                                  
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSADeleteEx(var arr: TStrArray; x: TIntArray);
var
  i, h, h2: Integer;
begin
  h := High(arr);
  h2 := High(x);
  if ((h > -1) and (h2 > -1)) then
    for i := 0 to h2 do
      if ((x[i] <= h) and (x[i] > -1)) then
      begin
        Delete(arr, x[i], 1);
        Dec(h);
      end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TEADelete(var arr: TExtArray; x: Integer): Boolean;
Contributors: Janilabo, LordJashin
Description: Deletes index (x) in arr (TExtendedArray). Returns true if successful                                                                                 
Date Created: October 5th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TEADelete(var arr: TExtArray; x: Integer): Boolean;
begin
  Result := ((x < (High(arr) + 1)) and (x > -1));
  if Result then
    Delete(arr, x, 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBADelete(var TBA: TBoxArray; x: Integer): Boolean;
Contributors: Janilabo, LordJashin
Description: Deletes TBA item by x as the index position. Returns true with success.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBADelete(var TBA: TBoxArray; x: Integer): Boolean;
begin
  Result := ((x < (High(TBA) + 1)) and (x > -1));
  if Result then
    Delete(TBA, x, 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoADelete(var arr: TBoolArray; x: Integer): Boolean;
Contributors: Janilabo
Description: Deletes item from arr by position (x). Returns true with success.          
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoADelete(var arr: TBoolArray; x: Integer): Boolean;           
begin
  Result := ((x < (High(arr) + 1)) and (x > -1));
  if Result then
    Delete(arr, x, 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TVADelete(var arr: TVariantArray; x: Integer): Boolean;
Contributors: Janilabo, LordJashin
Description: Deletes index (x) in arr (TVariantArray), returns true if successfull     
Date Created: October 5th, 2012. By Janilabo.
Last Modified: October 5th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TVADelete(var arr: TVariantArray; x: Integer): Boolean;
begin
  Result := ((x < (High(arr) + 1)) and (x > -1));
  if Result then
    Delete(arr, x, 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSACopy(source: TStrArray; var target: TStrArray; resetTarget: Boolean);
Contributors: Janilabo
Description:  Copies source to target, if resetTarget then it will clear the
              target before copying
Date Created: October 6th, 2012. By Janilabo
Last Modified: October 6th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSACopy(source: TStrArray; var target: TStrArray; resetTarget: Boolean);
var
  i, tAL, sAL: Integer;
begin
  if resetTarget then
    SetLength(target, 0);
  tAL := Length(target);
  sAL := Length(source);
  SetLength(target, (tAL + sAL));
  for i := 0 to (sAL - 1) do
    target[(tAL + i)] := source[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TSACopyEx(arr: TStrArray; pos1, pos2: Integer): TStrArray;
Contributors: Janilabo
Description: Copies TSA from pos1 to pos2. 
Date Created: October 6th, 2012. By Janilabo
Last Modified: October 6th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TSACopyEx(arr: TStrArray; pos1, pos2: Integer): TStrArray;
var
  i, l: Integer;
begin
  l := Length(arr);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 0, (l - 1));
    IntSetRange(pos2, 0, (l - 1));
    if (pos1 <> pos2) then
    begin
      SetLength(Result, (IAbs(pos1 - pos2) + 1));
      if (pos1 < pos2) then
        for i := pos1 to pos2 do
          Result[(i - pos1)] := arr[i]
      else
        for i := pos1 downto pos2 do
          Result[(pos1 - i)] := arr[i]; 
    end else
      Result := [arr[pos1]]; 
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TEACopy(source: TExtArray; var target: TExtArray; resetTarget: Boolean);
Contributors: Janilabo
Description: Copies source to target. If resetTarget is set to true,
             target will be cleared before the copying process.                                                                                                         
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TEACopy(source: TExtArray; var target: TExtArray; resetTarget: Boolean);
var
  i, tAL, sAL: Integer;
begin
  if resetTarget then
    SetLength(target, 0);
  tAL := Length(target);
  sAL := Length(source);
  SetLength(target, (tAL + sAL));
  for i := 0 to (sAL - 1) do
    target[(tAL + i)] := source[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TEACopyEx(arr: TExtArray; pos1, pos2: Integer): TExtArray;
Contributors: Janilabo
Description: Result (TExtendedArray) = from pos1 (index) to pos2 (index) in arr (TExtArray)                                                                                        
Date Created: October 6th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TEACopyEx(arr: TExtArray; pos1, pos2: Integer): TExtArray;
var
  i, l: Integer;
begin
  l := Length(arr);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 0, (l - 1));
    IntSetRange(pos2, 0, (l - 1));
    if (pos1 <> pos2) then
    begin
      SetLength(Result, (IAbs(pos1 - pos2) + 1));
      if (pos1 < pos2) then
        for i := pos1 to pos2 do
          Result[(i - pos1)] := arr[i]
      else
        for i := pos1 downto pos2 do
          Result[(pos1 - i)] := arr[i]; 
    end else
      Result := [arr[pos1]]; 
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBACopyEx(TBA: TBoxArray; pos1, pos2: Integer): TBoxArray;
Contributors: Janilabo
Description: Copies TBA from pos1 to pos2.                  
Date Created: October 6th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBACopyEx(TBA: TBoxArray; pos1, pos2: Integer): TBoxArray;
var
  i, l: Integer;
begin
  l := Length(TBA);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 0, (l - 1));
    IntSetRange(pos2, 0, (l - 1));
    if (pos1 <> pos2) then
    begin
      SetLength(Result, (IAbs(pos1 - pos2) + 1));
      if (pos1 < pos2) then
        for i := pos1 to pos2 do
          Result[(i - pos1)] := TBA[i]
      else
        for i := pos1 downto pos2 do
          Result[(pos1 - i)] := TBA[i]; 
    end else
      Result := [TBA[pos1]]; 
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBoACopy(source: TBoolArray; var target: TBoolArray; resetTarget: Boolean);
Contributors: Janilabo
Description: Copies source to target. If resetTarget is set to true,
             target will be cleared before the copying process.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBoACopy(source: TBoolArray; var target: TBoolArray; resetTarget: Boolean);
var
  i, tAL, sAL: Integer;
begin
  if resetTarget then
    SetLength(target, 0);
  tAL := Length(target);
  sAL := Length(source);
  SetLength(target, (tAL + sAL));
  for i := 0 to (sAL - 1) do
    target[(tAL + i)] := source[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoACopyEx(arr: TBoolArray; pos1, pos2: Integer): TBoolArray;
Contributors: Janilabo
Description: Copies TBlA from pos1 to pos2.                                    
Date Created: October 6th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoACopyEx(arr: TBoolArray; pos1, pos2: Integer): TBoolArray;
var
  i, l: Integer;
begin
  l := Length(arr);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 0, (l - 1));
    IntSetRange(pos2, 0, (l - 1));
    if (pos1 <> pos2) then
    begin
      SetLength(Result, (IAbs(pos1 - pos2) + 1));
      if (pos1 < pos2) then
        for i := pos1 to pos2 do
          Result[(i - pos1)] := arr[i]
      else
        for i := pos1 downto pos2 do
          Result[(pos1 - i)] := arr[i]; 
    end else
      Result := [arr[pos1]]; 
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TVACopy(source: TVariantArray; var target: TVariantArray; resetTarget: Boolean);
Contributors: Janilabo
Description: Copies source to target. If resetTarget is set to true,
             target will be cleared before the copying process.                        
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TVACopy(source: TVariantArray; var target: TVariantArray; resetTarget: Boolean);
var
  i, tAL, sAL: Integer;
begin
  if resetTarget then
    SetLength(target, 0);
  tAL := Length(target);
  sAL := Length(source);
  SetLength(target, (tAL + sAL));
  for i := 0 to (sAL - 1) do
    target[(tAL + i)] := source[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TVACopyEx(arr: TVariantArray; pos1, pos2: Integer): TVariantArray;
Contributors: Janilabo
Description: Copies arr (TVariantArray) from pos1 to pos2.     
Date Created: October 6th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TVACopyEx(arr: TVariantArray; pos1, pos2: Integer): TVariantArray;
var
  i, l: Integer;
begin
  l := Length(arr);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 0, (l - 1));
    IntSetRange(pos2, 0, (l - 1));
    if (pos1 <> pos2) then
    begin
      SetLength(Result, (IAbs(pos1 - pos2) + 1));
      if (pos1 < pos2) then
        for i := pos1 to pos2 do
          Result[(i - pos1)] := arr[i]
      else
        for i := pos1 downto pos2 do
          Result[(pos1 - i)] := arr[i]; 
    end else
      Result := [arr[pos1]]; 
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSAUnique(var arr: TStrArray);
Contributors: Janilabo
Description: Deletes any duplicates in the array (array of string)                    
Date Created: September 30th, 2012. By Janilabo
Last Modified: October 12th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSAUnique(var arr: TStrArray);
var
  h, i2, i, d: Integer; 
begin
  h := High(arr);   
  if (h > 0) then         
  for i := (h - d) downto 1 do
    for i2 := (i - 1) downto 0 do
      if (arr[i] = arr[i2]) then
      begin
        Delete(arr, i, 1);
        Inc(d);
        Break;  
      end;  
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TEAUnique(var arr: TExtArray);
Contributors: Janilabo
Description: Makes each value in arr (TExtendedArray) unique                                                                                                            
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TEAUnique(var arr: TExtArray);
var
  h, i2, i, d: Integer; 
begin
  h := High(arr);   
  if (h < 1) then
    Exit;         
  for i := (h - d) downto 1 do
    for i2 := (i - 1) downto 0 do
      if (arr[i] = arr[i2]) then
      begin
        Delete(arr, i, 1);
        Inc(d);
        Break;  
      end;  
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBAUnique(var TBA: TBoxArray);
Contributors: Janilabo
Description: Removes any and all duplicates from TBA.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBAUnique(var TBA: TBoxArray);
var
  h, i2, i, d: Integer; 
begin
  h := High(TBA);   
  if (h < 1) then
    Exit;         
  for i := (h - d) downto 1 do
    for i2 := (i - 1) downto 0 do
      if (TBA[i] = TBA[i2]) then
      begin
        Delete(TBA, i, 1);
        Inc(d);
        Break;  
      end;  
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TSASame(arr1, arr2: TStrArray): Boolean;
Contributors: Janilabo
Description: Returns true if both arrays (arrays of string) are identical                    
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TSASame(arr1, arr2: TStrArray): Boolean;
var
  h, i: Integer;
begin
  h := High(arr1);
  if ((h < 0) or (h <> High(arr2))) then
    Exit;
  for i := 0 to h do
    if (arr1[i] <> arr2[i]) then
      Exit;
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TEASame(arr1, arr2: TExtArray): Boolean;
Contributors: Janilabo
Description: Returns true if arr1 and arr2 are identical.                                                                                
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TEASame(arr1, arr2: TExtArray): Boolean;
var
  h, i: Integer;
begin
  h := High(arr1);
  if ((h < 0) or (h <> High(arr2))) then
    Exit;
  for i := 0 to h do
    if (arr1[i] <> arr2[i]) then
      Exit;
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBASame(TBA1, TBA2: TBoxArray): Boolean;
Contributors: Janilabo
Description: Returns true if TBA1 and TBA2 are identical.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBASame(TBA1, TBA2: TBoxArray): Boolean;
var
  h, i: Integer;
begin
  h := High(TBA1);
  if ((h < 0) or (h <> High(TBA2))) then
    Exit;
  for i := 0 to h do
    if ((TBA1[i].X1 <> TBA2[i].X1) or (TBA1[i].Y1 <> TBA2[i].Y1) or (TBA1[i].X2 <> TBA2[i].X2) or (TBA1[i].Y2 <> TBA2[i].Y2)) then
      Exit;
  Result := True;
end;
