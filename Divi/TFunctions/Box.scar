{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                Box Type Routines
--------------------------------------------------------------------------------
 * function BoxFromGrid(P: TPoint; Index, Width, Height, Columns, RowSpace, ColumnSpace: LongInt): TBox;
     By: Wanted
 * function ValidBox(B: TBox): Boolean; 
     By: Janilabo
 * function BoxContains(Inner_TB, Outer_TB: TBox): Boolean;
     By: Janilabo
 * procedure BoxDimensions(B: TBox; var W, H: Integer);
     By: Janilabo
 * function ConstrainBox(B: TBox; MB: TBox): TBox;
     By: Wanted
 * function FixBox(B: TBox): TBox;
     By: Janilabo        
 * function ShrinkBoxEx(B: TBox; XL, YT, XR, YB: LongInt): TBox;
     By: Wanted        
 * function RescaleBox(B: TBox; Percent: Extended): TBox;
     By: Wanted         
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BoxFromGrid(P: TPoint; Index, Width, Height, Columns, RowSpace, ColumnSpace: LongInt): TBox;
Contributors: Wanted, Janilabo.
Description: Creates box from indexes of boxes arranged in rows and columns. 
Date Created: March 7th, 2013. By Wanted
Last Modified: October 27th, 2014. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BoxFromGrid(P: TPoint; Index, Width, Height, Columns, RowSpace, ColumnSpace: LongInt): TBox;
var  
  TP: TPoint;
begin
  TP := Point(P.X + ((Index mod Columns) * ColumnSpace), P.Y + ((Index div Columns) * RowSpace));
  Result := Box(TP.X, TP.Y, TP.X + (Width - 1), TP.Y + (Height - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ValidBox(B: TBox): Boolean;
Contributors: Janilabo
Description: Returns true if B is valid (X1 <= X2 AND Y1 <= Y2).
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo      
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ValidBox(B: TBox): Boolean;
begin
  Result := ((B.X1 <= B.X2) and (B.Y1 <= B.Y2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BoxContains(Inner_TB, Outer_TB: TBox): Boolean;
Contributors: Janilabo, Wanted.
Description: Returns true if Inner_TB is inside Outer_TB.
Date Created: September 30th, 2012. By Janilabo
Last Modified: February 27th, 2013. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BoxContains(Inner_TB, Outer_TB: TBox): Boolean;
begin
  Result := False;
  if ((ValidBox(Inner_TB)) and (ValidBox(Outer_TB))) then
    Result := ((Inner_TB.X1 >= Outer_TB.X1) and (Inner_TB.X1 <= Outer_TB.X2) and (Inner_TB.X2 >= Outer_TB.X1) and (Inner_TB.X2 <= Outer_TB.X2) and
               (Inner_TB.Y1 >= Outer_TB.Y1) and (Inner_TB.Y1 <= Outer_TB.Y2) and (Inner_TB.Y2 >= Outer_TB.Y1) and (Inner_TB.Y2 <= Outer_TB.Y2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure BoxDimensions(B: TBox; var W, H: Integer);
Contributors: Janilabo
Description: Stores B dimensions to W (Width) and H (Height) variables.
Date Created: September 30th, 2012. By Janilabo
Last Modified: September 30th, 2012. By Janilabo      
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure BoxDimensions(B: TBox; var W, H: Integer);
begin
  W := ((B.X2 - B.X1) + 1);
  H := ((B.Y2 - B.Y1) + 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ConstrainBox(B: TBox; MB: TBox): TBox;
Contributors: Wanted, Janilabo.
Description: Makes the edges of your box within the edges of another box.
Date Created: December 6th, 2011. By Wanted
Last Modified: February 16th, 2020. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ConstrainBox(B: TBox; MB: TBox): TBox;
begin
  Result := B;
  if (not (ValidBox(Result))) then
    Exit;
  if (B.X1 < MB.X1) then
    Result.X1 := MB.X1;
  if (B.X1 > MB.X2) then
    Result.X1 := MB.X2;
  if (B.Y1 < MB.Y1) then
    Result.Y1 := MB.Y1;
  if (B.Y1 > MB.Y2) then
    Result.Y1 := MB.Y2;
  if (B.X2 > MB.X2) then
    Result.X2 := MB.X2;
  if (B.X2 < MB.X1) then
    Result.X2 := MB.X1;
  if (B.Y2 > MB.Y2) then
    Result.Y2 := MB.Y2;
  if (B.Y2 < MB.Y1) then
    Result.Y2 := MB.Y1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FixBox(B: TBox): TBox;
Contributors: Janilabo
Description: Fixes the Box. Swaps incorrectly set values (X1-Y1 > X2-Y2).
Date Created: September 30th, 2012. By Janilabo
Last Modified: February 16th, 2020. By Wanted    
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FixBox(B: TBox): TBox;
begin
  Result := B;
  if (Result.X1 > Result.X2) then
    Swap(Result.X1, Result.X2);
  if (Result.Y1 > Result.Y2) then
    Swap(Result.Y1, Result.Y2);
end;
   
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ShrinkBoxEx(B: TBox; XL, YT, XR, YB: LongInt): TBox;
Contributors: Wanted
Description: Makes a box smaller by removing given pixels from each side.
Date Created: February 16th, 2020. By Wanted  
Last Modified: February 16th, 2020. By Wanted    
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ShrinkBoxEx(B: TBox; XL, YT, XR, YB: LongInt): TBox;
begin
  Result := IntToBox(B.X1 + XL, B.Y1 + YT, B.X2 - XR, B.Y2 - YB);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RescaleBox(B: TBox; Percent: Extended): TBox;
Contributors: Wanted
Description: Makes a box smaller or larger. Maintains aspect ratio. Percent %/100
Example: NewBox := RescaleBox(B, 0.80); // 20% smaller (100-80)
NewBox2 := RescaleBox(B, 1.20); // 20% larger (100+20)
Date Created: February 16th, 2020. By Wanted  
Last Modified: February 16th, 2020. By Wanted    
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RescaleBox(B: TBox; Percent: Extended): TBox;
var
  Cx, Cy, Rx, Ry: Extended;
  W, H: LongInt;
begin
  BoxDimensions(B, W, H);
  Cx := (B.X1 + B.X2) / 2
  Cy := (B.Y1 + B.Y2) / 2;
  Rx := (W / 2) * Percent;
  Ry := (H / 2) * Percent;
  Result := IntToBox(Round(Cx - Rx), Round(Cy - Ry), Round(Cx + Rx), Round(Cy + Ry)); 
end;