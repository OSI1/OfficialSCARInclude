{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                               Debugging Routines
--------------------------------------------------------------------------------
 * procedure DebugATPABoundsEx(ATPA: T2DPointArray; ShowClient, ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean; FileName: string);
     By: Wanted
 * procedure DebugATPABounds(ATPA: T2DPointArray);      
     By: Wanted
 * procedure DebugATPA(ATPA: T2DPointArray);   
     By: Wanted
 * procedure DebugTPA(TPA: TPointArray);
     By: Wanted
 * procedure DebugTBA(TBA: TBoxArray);     
     By: Wanted
 * procedure DebugTB(TB: TBox);      
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugATPABoundsEx(ATPA: T2DPointArray; ShowClient, ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean; FileName: string);
Contributors: Wanted, Freddy
Description: Debugs an ATPA to the debug window with tons of options.
Date Created: October 22nd, 2011. By Wanted
Last Modified: March 4th, 2013. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugATPABoundsEx(ATPA: T2DPointArray; ShowClient, ShowTPAs, ShowATPABorder, ShowTPABorders, ShowTPAIndexes: Boolean; FileName: string);
var
  bmpDebug: TSCARBitmap;
  Width, Height, I, II, H, HH, Col: Integer;
  ATPA2: T2DPointArray;
  mTPA, TPA: TPointArray;
  B, BB: TBox;
  {$IFNDEF RS2}
    Arial: Integer;
  {$ENDIF}
begin
  ATPA2 := CopyATPA(ATPA);
  B := ATPABounds(ATPA2);
  TPADimensions(mTPA, Width, Height);
  DecEx(B.X1, Round(Width * 0.25));
  if (B.X1 < 0) then
    B.X1 := 0;
  DecEx(B.Y1, Round(Height * 0.25));
  if (B.Y1 < 0) then
    B.Y1 := 0;
  IncEx(B.X2, Round(Width * 0.25));
  IncEx(B.Y2, Round(Height * 0.25));
  Width := B.X2 - B.X1 + 1;
  Height := B.Y2 - B.Y1 + 1;
  if (ShowClient) then 
    bmpDebug := GetClient.CaptureEx(B.X1, B.Y1, B.X2, B.Y2)
  else begin
    bmpDebug := TSCARBitmap.Create('');
    bmpDebug.SetSize(Width, Height);
  end;         
  try
    if ((ShowTPAs) or (ShowTPABorders) or (ShowTPAIndexes)) then
    begin
      H := High(ATPA2);
      for I := 0 to H do
      begin
        Col := Random(clWhite + 1);
        OffsetTPA(ATPA2[I], -B.X1, -B.Y1);
        HH := High(ATPA2[I]);
        if (ShowTPAs) then
          for II := 0 to HH do
            bmpDebug.Pixels[ATPA2[I][II].X, ATPA2[I][II].Y] := Col;
        if ((ShowTPABorders) or (ShowTPAIndexes)) then
          Col := Random(clWhite + 1);
        if (ShowTPABorders) then
        begin
          TPA := BoxToTPA(TPABounds(ATPA2[I]), False);
          HH := High(TPA);
            for II := 0 to HH do
              bmpDebug.Pixels[TPA[II].X, TPA[II].Y] := Col;
        end;
        if (ShowTPAIndexes) then
        begin
          {$IFDEF RS2}
            TPA := LoadTextTPA(IntToStr(I), StatChars);
          {$ELSE}
            Arial := LoadCharsFromFont2('Arial', 8, True, False, False, False);
            TPA := TextToTPA(IntToStr(I), Arial);
          {$ENDIF}
          BB := TPABounds(ATPA2[I]);
          OffsetTPA(TPA, BB.X1 + 2, BB.Y1 + 2);
          HH := High(TPA);
          for II := 0 to HH do
            try
              bmpDebug.Pixels[TPA[II].X, TPA[II].Y] := Col;
            except
            end;
        end;
      end;
      if (ShowATPABorder) then
      begin
        TPA := BoxToTPA(ATPABounds(ATPA2), False);
        H := High(TPA);
        for I := 0 to H do    
          bmpDebug.Pixels[TPA[I].X, TPA[I].Y] := clBlue;
      end;
    end;
    DebugBitmap(bmpDebug);
    if (FileName <> '') then
    begin
      if (not (DirectoryExists(ScriptPath + 'Debug\'))) then
        bmpDebug.SaveToBmp(ScriptPath + FileName + '.bmp')
      else
        bmpDebug.SaveToBmp(ScriptPath + 'Debug\' + FileName + '.bmp');
    end;
  finally
    bmpDebug.Free;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugATPABounds(ATPA: T2DPointArray);
Contributors: Wanted
Description: Debugs an ATPA to the debug window with all options enabled.
Date Created: October 22nd, 2011. By Wanted
Last Modified: October 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugATPABounds(ATPA: T2DPointArray);
begin
  DebugATPABoundsEx(ATPA, True, True, True, True, True, '');
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugATPA(ATPA: T2DPointArray);
Contributors: Wanted
Description: Debugs an ATPA to the debug window.
Date Created: October 22nd, 2011. By Wanted
Last Modified: October 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugATPA(ATPA: T2DPointArray);
begin
  DebugATPABoundsEx(ATPA, True, True, True, False, False, '');
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugTPA(TPA: TPointArray);
Contributors: Wanted
Description: Debugs a TPA to the debug window.
Date Created: October 22nd, 2011. By Wanted
Last Modified: October 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugTPA(TPA: TPointArray);
begin
  DebugATPA([TPA]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugTBA(TBA: TBoxArray);
Contributors: Wanted
Description: Debugs a TBoxArray
Date Created: October 22nd, 2011. By Wanted
Last Modified: March 4th, 2013. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugTBA(TBA: TBoxArray);
begin
  DebugATPABoundsEx(TBAToATPA(TBA, False), True, False, False, False, True, '');
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DebugTB(TB: TBox);
Contributors: Wanted
Description: Debugs a TBox.
Date Created: October 22nd, 2011. By Wanted
Last Modified: October 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DebugTB(TB: TBox);
begin
  DebugTBA([TB]);
end;