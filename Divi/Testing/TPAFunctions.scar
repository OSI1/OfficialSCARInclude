{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include                              
                               TPA Function Testing
--------------------------------------------------------------------------------

   Last Modified: November 22nd, 2012. By LordJashin. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{$DEFINE OSIDEBUG}
{$I ../../OSI.scar}

const
  RedFlashAmount = 3; // how many times the red dots flash when running 
  
function TPASwap(TPA: TPointArray): TPointArray;
var
  i: Integer;
begin
  Result := CopyTPA(TPA);
  for i := 0 to high(Result) do
    Result[i] := Point(Result[i].Y, Result[i].X);
end;
                      
procedure DebugBitmapAndSetAsClient(Bmp: TSCARBitmap; Interval: Integer);
begin
  DebugBitmap(Bmp);
  SetBitmapAsClient(Bmp);                                              
  wait(Interval);
end;

function OffsetTPA2(TPA: TPointArray; XOffset, YOffset: Integer): TPointArray;
begin
  Result := CopyTPA(TPA);
  OffsetTPA(Result, XOffset, YOffset);
end;

procedure BlinkDebugBitmap(Bmp: TSCARBitmap; TPA: TPointArray; Text: string; Color, Times, Interval: Integer);
var
  i, h, Verdana: Integer;
  Bmp2, Bmp3: TSCARBitmap;
  TPA2: TPointArray;
begin
  if not BitmapExists(Bmp) then Exit;
  TPA2 := TPA;                                                               
  if (Text <> '') then
  begin 
    Verdana := LoadCharsFromFont2('Verdana', 8, false, false, false, false);
    Bmp3 := CreateBitmapFromText(Text, Verdana, ClWhite);
    h := Bmp3.Height;
    OffsetTPA(TPA2, 0, h);    
  end;
  repeat                              
    Bmp2 := TSCARBitmap.Create('');
    Bmp2.SetSize(Bmp.Width, Bmp.Height + h);
    if (Text <> '') then
      Bmp3.DrawTo(Bmp2, 0, 0);
    Bmp.DrawTo(Bmp2, 0, h);
    DebugBitmap(Bmp2);
    Bmp2.SetPixels(TPA2, Color);        
    wait(Interval);     
    DebugBitmap(Bmp2);                                 
    wait(Interval);
    Bmp2.Free;            
    Inc(i);
  until (i = Times);
  if (Text <> '') then        
    Bmp3.Free;
end;

procedure BlinkDebugBitmaps(BmpArr: array of TSCARBitmap; TPA: TPointArray; Text: string; Color, Times, Interval: Integer; Vertical: Boolean);
var
  Bmp: TSCARBitmap;
begin
  Bmp := BitmapLine(BmpArr, Vertical);
  BlinkDebugBitmap(Bmp, TPA, Text, Color, Times, Interval);
end;

procedure TestTPAFunctions;
var
  Bmp, Bmp2: TSCARBitmap;                   
  TPA, TPA2: TPointArray;    
begin
  Bmp := TSCARBitmap.Create('deNrt3LGN2zAUgGH1GSDdASkyQJob6DKI1/AmGSBImXGCw1VO6lCAH54fKVL+frA9nyB/jR8p/dp+bDdJkiRJkqTnaIvlRgkn4SScJJyEk6al8uf7S2QhJ5yEk3DCCSechJNmplK1kMMJJ+EknHDCCSeccFLcyXgqI8lRhxNOOOGEE07CCSeccDofp5/fPrdrUU4fv7+2CyeccMIJJ5xwEk444YQTTjjpwbnTrrFjye1SuSvH3AknnHDCCSechBNOOOH0DO1SGUyukAo8OOGEE07CSTjhhBNOTzgo2GXwtn36b+UOZrefnKZyaQqOQXzpOOGEE0444SSccMIJp6WpRB7vDQ4K2j9sybUr+HxxZObQImyBGR3ghBNOOOGEE0444YQTTks7Sb+UKcgpQiV9kRGZEXLBCcNgcrN5xgknnHDCCSeccMIJJ5zm2aXNrTSnqtJv3M3NJXb/Y9eZQ+Rm4oQTTjjhhBNOOOGEE0444YRTHE/kvqVXUN379cvdNZjT4FdORR5M3j3ljhNOOOGEE0444YQTTjjh1JtTobocufRZ8UIqkStPq8sBqzrVgBNOOOGEE0444YQTTjhNy+mSbUJyhSraWxdxUnsNuaFH8A1XOOGEE0444YQTTjjhhNO6nNJ4XpuWIBccAuReQjXYSfAacMIJJ5xwwgknnHDCCafTc3qNNZLcJOr6cer3+qxHzhIngOGEE0444YQTTjjhhBNOOOH0DJyue/Ujt8oIq/AR465UIocccMIJJ5xwwgknnHDCCaelObUFv8ocsDORK9zi70olgid98AAnnHDCCSeccMIJJ5xwmpNTcFM4ByyN8PAd58h7kw53EqdStVN8VxdOOOGEE0444YQTTjjhdAinCLDdcirS+8uDZw6FnKqcFFJJT0JKnhTGCSeccMIJJ5xwwgknnAZwKlRXuL88+LxxmtPhv+7Tm9e3Q8MJJ5xwwgknnHDCCSeccMJpdU4TjrDSA6uqSdS/NSGV21nCCSeccMIJJ5xwwgknnFZXVwis3+ggfYD8xL/uccIJJ5yEE0444YQTTnqQXHpQsGVrgfl1jxNOOOEknHDCCSeccFL5jnPXbxMVnHASTsIJJ5xwwgknSZIkSZIkSZIkSZIkSZIkSZIk6Rz9BYCmQ9M=');
  Bmp2 := Bmp.Clone;       
  SetBitmapAsClient(Bmp);    
  FindColorsEx(TPA, [2477561], 0, 0, Bmp.Width, Bmp.Height);
  TPA2 := CopyTPA(TPA);
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'FindColorsEx(TPA, [2477561], 0, 0, Bmp.Width, Bmp.Height)', clRed, RedFlashAmount, 500, False);    
  TPAEdge(TPA);
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAEdge(TPA)', clRed, RedFlashAmount, 500, False);
  TPA := CopyTPA(TPA2);
  InvertTPA(TPA);
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'InvertTPA(TPA)', clRed, RedFlashAmount, 500, False);
  TaskMessageDlg('TPASwap:', 'Swapped x''s and y''s in the TPA', mtInformation, [mbClose]);
  TPA := CopyTPA(TPA2);
  DebugTPA(TPASwap(TPA));          
  wait(3000);                 
  TPA := TPAFromBox(Box(0, 0, Bmp.Width - 1, Bmp.Height - 1));                
  TPA2 := CopyTPA(TPA);       
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAFromBox(Box(0, 0, Bmp.Width - 1, Bmp.Height - 1))', clRed, RedFlashAmount, 500, False);
  TPAExtractBoxes(TPA, [Box(25, 25, 50, 50), Box(75, 75, 100, 100)]);                                                                                                               
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAExtractBoxes(TPA, [Box(25, 25, 50, 50), Box(75, 75, 100, 100)])', clRed, RedFlashAmount, 500, False);
  TPA := CopyTPA(TPA2);
  TPAExtractCircle(TPA, Point(100, 80), 50);                                                                                                                                     
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAExtractCircle(TPA, Point(100, 80), 50)', clRed, RedFlashAmount, 500, False);
  TPA := CopyTPA(TPA2);                                             
  TPAExtractTriangle(TPA, 50, 50, 100, 100, 150, 50);
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAExtractTriangle(TPA, 50, 50, 100, 100, 50, 50)', clRed, RedFlashAmount, 500, False);
  TPA := CopyTPA(TPA2);    
  TPAExtractPie(TPA, Point(120, 100), 75, 360, 0.5, 5); 
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAExtractPie(TPA, Point(120, 100), 75, 360, 0.5, 5)', clRed, RedFlashAmount, 500, False);
  TPA := CopyTPA(TPA2);                                                                                                                       
  TPAFilterPoints(TPA, TPAFromBox(Box(50, 50, 100, 100)));
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'TPAFilterPoints(TPA, TPAFromBox(Box(50, 50, 100, 100)))', clRed, RedFlashAmount, 500, False);
  TPA := RandomTPA(800, Bmp.Width, Bmp.Height);
  BlinkDebugBitmaps([Bmp, Bmp2], OffsetTPA2(TPA, Bmp.Width, 0), 'RandomTPA(200, Bmp.Width, Bmp.Height)', clRed, RedFlashAmount, 500, False);
  HideDebugImgWindow;    
  Bmp.Free;                           
end;

begin
  ClearDebug;           
  TestTPAFunctions;      
end.
