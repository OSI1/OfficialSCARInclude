{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                 Login Routines
--------------------------------------------------------------------------------
 * function GetLobbyTabBounds(Tab: Integer): TBox;
 * function CurrentLobbyTab: Integer;                         
 * function LobbyTab(Tab: Integer): Boolean;
 * function LoginScreen: Boolean;
 * function LobbyScreen: Boolean;
 * function LoggedIn: Boolean;
 * function RSReady: Boolean;                
 * function SetAudio(Enabled: Boolean): Boolean;
 * function FixLoginScreen: Boolean;      
 * function LoginToLobby: Boolean;
 * function Login: Boolean;
 * function ExitToLobby: Boolean;
 * function LeaveLobby: Boolean;
 * function Logout: Boolean;
 * function SwitchToPlayer(Player: Integer; Active: Boolean): Boolean;
 * function NextPlayer(Active: Boolean): Boolean;
 * function RandomNextPlayer(Active: Boolean): Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                               Login.scar forwards
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function NextPlayer(Active: Boolean): Boolean; forward;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                               WorldSwitcher.scar forwards
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SelectWorld(World: Integer): Boolean; forward;
function RandomWorld(Members: Boolean): Integer; forward;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetLobbyTabBounds(Tab: Integer): TBox;
Contributors: Wanted, LordJashin
Description: Gets the box for w/e lobby tab you want, but there is only so many
Date Created: September 28th, 2012. By LordJashin. RS2 Build 718.
Last Modified: September 28th, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetLobbyTabBounds(Tab: Integer): TBox;
begin
  if not Tab > 5 then
    Result := Box(MLT1 + (Tab * MLTS), MLT2, MLT3 + (Tab * MLTS), MLT4);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CurrentLobbyTab: Integer;
Contributors: Wanted, LordJashin
Description: Returns what tab you have open at the lobby screen. 6 if failed.
Date Created: August 10th, 2011. By Wanted. RS2 Build 661.
Last Modified: September 26th, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CurrentLobbyTab: Integer;
begin
  for Result := 0 to 6 do                                                    
    if (SimilarColors(GetColor(MLTS + (Result * MLTS), 39), 3027766, 5)) then  
      Break;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LobbyTab(Tab: Integer): Boolean;
Contributors: Wanted, LordJashin
Description: Clicks on a lobby tab, if not already open.
Date Created: August 10th, 2011. By Wanted. RS2 Build 661.
Last Modified: September 26th, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LobbyTab(Tab: Integer): Boolean;
var
  I: Integer;
  B1: TBox;
begin
  B1 := GetLobbyTabBounds(Tab);
  if B1 = Box(0, 0, 0, 0) then Exit;
  I := CurrentLobbyTab;
  Result := I = Tab;
  if ((Result) or (I > 5)) then
    Exit;
  MouseBox(B1.X1, B1.Y1, B1.X2, B1.Y2, ClickLeft);
  WaitRR(250, 400);
  Result := CurrentLobbyTab = Tab;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LoginScreen: Boolean;
Contributors: Wanted, Freddy, LordJashin
Description: Returns true if at the screen to type in user/pass.
Date Created: August 10th, 2011. By Wanted. RS2 Build 661.
Last Modified: September 30th, 2012. By LordJashin. RS2 Build 735.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LoginScreen: Boolean;
begin
  RevertRSClient;
  Result := (CountColor(clLoginText, 357, 151, 404, 170) = 160); // Big "Login" word
  UpdateRSClient;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LobbyScreen: Boolean;
Contributors: Wanted, Bixby Sayz
Description: Returns true if at lobby screen.
Date Created: August 11th, 2011. By Wanted. RS2 Build 662.
Last Modified: February 15th, 2013. By Bixby Sayz. RS2 Build 749.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LobbyScreen: Boolean;
var
  B1, B2, B3: Boolean;
begin
  // The confirm/validate your email dialogs prevent detection of lobby screen.
  // (Older accounts that haven't registered an email get this) Put detection
  // in here to avoid spamming this same code across 4 different functions. 
  B1 := (CountColor(5353701, 496, 421, 560, 439) = 59);       // Validate your email
  B2 := (CountColor(5353701, 493, 338, 558, 356) = 59);       // Confirm your email
  B3 := (CountColor(12566463, 201, 153, 262, 164) = 117);     // Thank you
  if B1 then
    MouseBox(496, 421, 560, 439, ClickLeft)
  else
    if B2 then
      MouseBox(493, 338, 558, 356, ClickLeft)
    else
      if B3 then
        MouseBox(334, 397, 429, 427, ClickLeft);
  if (B1 or B2 or B3) then
    WaitRR(750, 1250);
  Result := InRange(CurrentLobbyTab, 0, 5);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LoggedIn: Boolean;
Contributors: Wanted
Description: Returns true if Logged In.
Date Created: August 8th, 2011. By Wanted. RS2 Build 660.
Last Modified: August 8th, 2011. By Wanted. RS2 Build 660.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LoggedIn: Boolean;
begin
  Result := (CountColor(clWhite, 471, 486, 506, 497) = 69);   // Report button text
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RSReady: Boolean;
Contributors: Wanted, Freddy
Description: Returns true when runescape isn't intially loading the game.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: July 28th, 2012. By Freddy. RS2 Build 727.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RSReady: Boolean;
begin
{$IFDEF SMART}
  SmartSetRefresh(Smart_Client, 50);
{$ENDIF}
  Result := False;     
  if (not (LoggedIn)) then
    if (not (LobbyScreen)) then 
      if (not (LoginScreen)) then
        Exit;
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetAudio(Enabled: Boolean): Boolean;
Contributors: LordJashin
Description: Only for LoginScreen. False - turns audio off, True - turns in on to max. 
Date Created: October 12th, 2012. By LordJashin. RS2 Build 735.
Last Modified: October 12th, 2012. By LordJashin. RS2 Build 735.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetAudio(Enabled: Boolean): Boolean;
begin
  Result := False;
  if not LoginScreen then Exit; 
  RevertRSClient;         
  MouseBox(695, 20, 709, 20, MoveTo);
  WaitRR(1500, 2500);    
  if Enabled then    
    begin
      ClickMouse(685, 17, mbLeft);
      WaitRR(500, 100);
      OSI_WriteAndLog('RS2: Tried Setting Audio to Max' )
      ClickMouse(685, 17, mbLeft);  
    end
  else
    begin   
      ClickMouse(632, 17, mbLeft);
      WaitRR(500, 100);
      OSI_WriteAndLog('RS2: Tried Setting Audio to Disabled');
      ClickMouse(632, 17, mbLeft);      
    end;     
  WaitRR(700, 1200);
  MoveMouse(RSX2 - 100 - Random(100), RSY1 + 100 + Random(50));
  UpdateRSClient;                            
  if LoginScreen then
    Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FixLoginScreen: Boolean;
Contributors: LordJashin
Description: Trys to close popups at login screen, and fix any problems e.g Gfx
Date Created: October 1st, 2012. By LordJashin. RS2 Build 735.
Last Modified: October 12th, 2012. By LordJashin. RS2 Build 735.
Handles: Auto Setup graphics, graphics problems
Explanation: This is used when RS2 first starts up and you reach any popups 
             before the login screen or reach the login screen itself. When 
             using RS2 on an internet browser/SMART problems may occur at the 
             login screen/first loading it. This attempts to solve those 
             problems by color finding and with a fail safe, if the color find
             doesn't fix it then it does exact coordinate (browser mostly has 
             these problems) clicking. If it does resort to exact coordinate 
             clicking the function will return false and tell the user to change 
             his/her graphics settings to Min, Fixed, Custom->Software mode,
             close any popups, and re-selec the client before running the script
             again. If this doesn't fix it, then a ShowMessage, popup is 
             displayed telling the user to fix the graphics settings manually!
             Then the script will be terminated because the graphics settings
             weren't fixed!

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FixLoginScreen: Boolean;
var
  i, OldRSX2, OldRSY2: Integer;          
begin 
  Result := True;
  RevertRSClient;                                        
  MouseBox(RSX1, RSY1, RSX1 + Random(100), RSY1 + Random(100), MoveTo);
  UpdateRSClient;
  if RSReady then Exit;
  RevertRSClient;                                                                       
  if (CountColorTol(12312808, 205, 217, 559, 279, 8) >= 500) then
    begin
      WaitRR(750, 1500);
      MouseBox(346, 319, 413, 325, ClickLeft); // "Leave Alone" at Auto Setup popup
    end;      
  UpdateRSClient;       
  if RSReady then Exit;              
  Result := False;  
  RevertRSClient; 
  {$IFDEF SMART} // SMART can be set on Resizable by accident this accounts for that!
    MouseBox(727, 60, 739, 69, ClickLeft); // Graphics button (Min Resizable)   
    WaitRR(700, 1200);
    MouseBox(200, 300, 246, 329, ClickLeft); // "Fixed" screen size (Min Resizable)
    WaitRR(900, 1200);
    MouseBox(490, 192, 560, 207, ClickLeft); // "Custom" graphics setting
    WaitRR(700, 1200);
    MouseBox(270, 260, 275, 260, ClickLeft); // Lowest Brightness
    WaitRR(2000, 2500);
    MouseBox(616, 11, 623, 18, ClickLeft);   // Exits the graphics settings   
    OSI_WriteAndLog('RS2: You need to make sure your graphics settings on SMART are on Fixed size');   
    Exit;
  {$ENDIF}                                                                              
  OSI_WriteAndLog('RS2: Attempting to Fix the Login Screen, and the Graphics Settings!' + #13#10 +
                  'RS2: You must set the graphics to (Min, Fixed, Custom->Software Mode)!' + #13#10 +
                  'RS2: You must close popups, make SURE you are at the Login Screen!' + #13#10 +
                  'RS2: You must re-select the Client (RS2) with the Crosshairs (+)!' + #13#10 + 
                  'RS2: If you still can''t get it to work try Restarting SCAR Divi!');
    Repeat             
      GetClient.Update;      
      with GetClient.ImageArea do
      if ((X2 < 700) or (Y2 < 400) or (X2 > 1050) or (Y2 > 800))  then
        Break;                 
      with GetClient.InputArea do
      MouseBox(X2 - 47, 8, X2 - 37, 13, ClickLeft); // Graphics settings button (Med Resizable 2)
      waitRR(700, 1400);     
      MouseBox(715, 10, 732, 23, ClickLeft);   // Graphics settings button (Min)
      WaitRR(700, 1400);
      MouseBox(752, 60, 763, 65, ClickLeft);   // Graphics settings button (Min Resizable)
      WaitRR(700, 1400);
      OldRSX2 := RSX2;
      OldRSY2 := RSY2;
      RSX2 := RSMedX2;
      RSY2 := RSMedY2;           
      with GetClient.InputArea do
      if (X2 > 900) then
      MouseBox(941, 141, 955, 151, ClickLeft); // Graphics settings button (Med Resizable)
      WaitRR(700, 1400);                                                      
      MouseBox(180, 275, 230, 310, ClickLeft); // "Fixed" screen size (Min)    
      WaitRR(700, 1200);                                       
      GetClient.Update;               
      MouseBox(200, 300, 246, 329, ClickLeft); // "Fixed" screen size (Min Resizable) 
      WaitRR(700, 1200);
      GetClient.Update;
      MouseBox(312, 388, 355, 412, ClickLeft); // "Fixed" screen size (Med Resizable)                                                     
      WaitRR(700, 1200);       
      RSX2 := OldRSX2;
      RSY2 := OldRSY2;
      GetClient.Update;
      MouseBox(194, 189, 238, 212, ClickLeft); // "MIN" graphics setting
      WaitRR(700, 1400);                                         
      MouseBox(490, 192, 560, 207, ClickLeft); // "Custom" graphics setting
      WaitRR(900, 1200);                                                     
      { 
        "Software" graphics setting uses a box that accomadates the Safe mode button
        being included, or if it is not included. Either way it will still work.
        Do not change unless you know what you are doing. (Safe mode button shows up
        in browser if you are running SMART as well). 
      }
      MouseBox(275, 180, 300, 197, ClickLeft); // "Software" graphics setting
      WaitRR(700, 1200);
      MouseBox(270, 260, 275, 260, ClickLeft); // Lowest Brightness                                            
      WaitRR(1500, 2400);   
      MouseBox(616, 11, 623, 18, ClickLeft);   // Exits the graphics settings
      WaitRR(700, 1400);    
      UpdateRSClient;
      if RSReady then
        begin
          Result := True;
          Exit;
        end;   
      RevertRSClient;
      MouseBox(346, 319, 413, 325, ClickLeft); // "Leave Alone" at Auto Setup popup
      WaitRR(700, 1400);
      i := 1 + 1;    
      GetClient.Update;                            
    Until (i = 2);          
  UpdateRSClient;
  wait(500);            
  TerminateScript;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LoginToLobby: Boolean;
Contributors: Wanted, Anonymous, Freddy, Bixby Sayz.
Description: Logins in current active player to lobby.
Date Created: August 10th, 2011. By Wanted. RS2 Build 661.
Last Modified: February 15th, 2013. By Bixby Sayz. RS2 Build 749.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LoginToLobby: Boolean;
var
  B, B2, B3, B4, RetryLogin: Boolean;
  T, I, Attempts: Integer;
  Actions: TVariantArray;
  TPA: TPointArray;
  TBA: TBoxArray;
  P: TPoint;
  S: string;
  TB: TBox;
label
  ProcStart;
begin
  Result := False;
  Attempts := 0;
  if (not (WaitFunc(@RSReady, True, 100, 250, 90000, 120000))) then
    Exit;
  if ((LobbyScreen) or (LoggedIn)) then
  begin
    Result := True;
    Exit;
  end;
  if (AllPlayersInActive) then
  begin
    OSI_WriteAndLog('RS2: No active players to login!');
    Exit;
  end;
  if (not (Players[CurrentPlayer].Active)) then
    CurrentPlayer := NextActivePlayerIndex;
  OSI_WriteAndLog('RS2: Logging in ' + Copy(Capitalize(Players[CurrentPlayer].Name), 1, 4) + '...');
  ProcStart:                                                  // Retry Login Mark
  B3 := (CountColor(10141389, 345, 268, 418, 280) = 143);     // Auto setup graphics
  if (not (B3)) then
    B4 := (CountColor(10141389, 343, 278, 418, 290) = 143);   // Available changed
  if (B3) then
    MouseBox(349, 273, 414, 275, ClickLeft)
  else
    if (B4) then
      MouseBox(349, 284, 414, 287, ClickLeft);
  T := GetSystemTime + RR(1500, 2500);
  repeat
    B := CountColor(clLoginText, 202, 39, 390, 56) = 568;     // Create a Free Account
    if (not (B)) then
    begin
      B2 := LoginScreen;
      if (B2) then
        Break;
    end;
    WaitRR(200, 400);
  until ((GetSystemTime > T) or (B));
  if (B) then
  case (Random(2)) of
    0: MouseBox(544, 42, 556, 53, ClickLeft);                 // Exit
    1: MouseBox(165, 403, 428, 405, ClickLeft);               // Already have an account
  end;
  if (not (B2)) then
    if (not (WaitFunc(@LoginScreen, True, 250, 400, 3500, 4500))) then
    begin
      OSI_WriteAndLog('RS2: Couldn''t find Login Screen!');
      Exit;
    end;
  {$IFNDEF SMART}
  if (not ((B3) or (B4))) then
    if (not (FindColor(P.X, P.Y, clLoginText, 280, 151, 487, 172))) then
    begin
      MouseBox(280, 151, 487, 172, ClickLeft);
      WaitRR(100, 250);
    end;
  {$ENDIF}
  TBA := [Box(280, 151, 487, 197), Box(280, 195, 487, 219)];  // User / Pass Boxes
  B := False;
  for I := 0 to 1 do
  begin
    if (FindColorEx(TPA, clLoginText, TBA[I].X1, TBA[I].Y1, TBA[I].X2, TBA[I].Y2)) then
    begin
      B := True;
      TB := TPABounds(TPA);
      if (I = 0) then
        MouseBox(TB.X2 + 2, TBA[I].Y1, TB.X2 + 5, TBA[I].Y2, ClickLeft);
      WaitRR(250, 400);
      T := GetSystemTime + RR(8500, 9500);
      while ((FindColor(P.X, P.Y, clLoginText, TBA[I].X1, TBA[I].Y1, TBA[I].X2, TBA[I].Y2)) and (GetSystemTime < T)) do
      begin
        PushKey(VK_Back);                                     // Clear Boxes
        WaitRR(175, 225);
      end;
      WaitRR(250, 400);
    end;
    if (I = 0) then
    begin
      if (Players[CurrentPlayer].Login <> '') then
        S := Players[CurrentPlayer].Login
      else
        S := Players[CurrentPlayer].Name;
      TypeSend(S);
    end
    else
      TypeSend(Players[CurrentPlayer].Pass);
  end;
  T := GetSystemTime + RR(50000, 70000);
  repeat
    SetLength(Actions, 0);
    if (GetSystemTime > T) then // Response                    Wait     Retrys  Action         [CurrentPlayer].Loc       Modified            By              Build #  Status
      Actions :=       ['RS2: About one minute has passed...',    0,    0,      'PlayerFalse', 'Login Failed']        // August 10, 2011     Wanted          661      confirmed
    else
    case (CountColor(clLoginText, 260, 140, 506, 395)) of
      364: Actions :=  ['RS2: Error connecting',              20000,    9,      'Exit',        'Error Connecting'];   // February 15th, 2013 Bixby Sayz      749      confirmed
      732, 894:
            Actions := ['RS2: Runescape has been updated',        0,    0,      'Exit',        'RS updated'];         // August 7, 2011      Anonymous       660      unconfirmed
      763, 2348, 2299:
            Actions := ['RS2: Invalid username / password',       0,    2,      'PlayerFalse', 'Wrong User/Pass'];    // August 10, 2011     Wanted          661      confirmed
      777: Actions :=  ['RS2: Login limit exceeded',          20000,   10,      '',            'Waiting for login.']; // August 7, 2011      Anonymous       660      unconfirmed
      951: Actions :=  ['RS2: Your account is already logged in', 5,    0,      'PlayerTrue',  'Already logged in'];  // August 7, 2011      Anonymous       660      unconfirmed
      1057: Actions := ['RS2: Too many incorrect logins', 5 * 60000,    2,      'PlayerFalse', 'Too many logins'];    // August 7, 2011      Anonymous       660      unconfirmed
      1088: Actions := ['RS2: Your account has been disabled',    0,    0,      'PlayerFalse', 'Acc Disabled'];       // August 7, 2011      Anonymous       660      unconfirmed
      1535: Actions := ['RS2: Your account has been locked',      0,    0,      'PlayerFalse', 'Acc Locked'];         // August 10, 2011     Wanted          661      confirmed 
      1606: Actions := ['RS2: Game session has ended',            0,    0,      'Exit',        'RS updated'];         // July 26, 2012       Bixby Sayz      727      confirmed
    end;
    
    if (Length(Actions) > 0) then
    begin
      WaitRR(500, 1500);
      PushKey(VK_Escape);
      OSI_WriteAndLog(Actions[0]);
      WaitRR(Actions[1] - 100, Actions[1] + 100);
      if (Actions[2] <> 0) then
        if (Attempts < Actions[2]) then
        begin
          RetryLogin := True;
          WaitRR(2000, 3000);
          Break;
        end;
      if (Actions[4] <> '') then
        Players[CurrentPlayer].Loc := Actions[4];
      case Actions[3] of
        'PlayerFalse': NextPlayer(False);
        'PlayerTrue': NextPlayer(True);
        'Exit': Exit;
      end;
      Exit;
    end;
    Wait(100);
    Result := ((LobbyScreen) or (LoggedIn));
  until (Result);
  if (RetryLogin) then
  begin
    RetryLogin := False;
    Inc(Attempts);
    goto ProcStart;                                           // Go to Retry Login Mark
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Login: Boolean;
Contributors: Wanted, Anonymous, Freddy.
Description: Logins in current active player.
Date Created: September 25th, 2011. By Wanted. RS2 Build 666.
Last Modified: July 21th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Login: Boolean;
var
  B, BB, RetryLogin: Boolean;
  T, Attempts, TT: Integer;
  Actions: TVariantArray;
  P: TPoint;
label
  ProcStart;
begin
  Attempts := 0;
  ProcStart:
  Result := LoggedIn;
  if (Result) then
  begin
    OSI_WriteAndLog('RS2: ' + Players[CurrentPlayer].Name + ' logged in.');
    PlayerStartTime := GetSystemTime;
    Exit;
  end;
  if (not (LoginToLobby)) then                                // Get to / At lobby screen
    Exit;
  WaitRR(500, 1000);
  if (Length(Players[CurrentPlayer].WorldInfo) > 0) then      // World Switching
    if (Players[CurrentPlayer].WorldInfo[0]) then
      Players[CurrentPlayer].Member := True
    else
      Players[CurrentPlayer].Member := False;
  if (LoginWorldSwitcher) then
    if (Length(Players[CurrentPlayer].WorldInfo) < 1) then
      Players[CurrentPlayer].WorldInfo := [Players[CurrentPlayer].Member, 0, AllowHRW];
  case Length(Players[CurrentPlayer].WorldInfo) of
    2: SelectWorld(Players[CurrentPlayer].WorldInfo[1]);
    3: begin
         if (Players[CurrentPlayer].WorldInfo[0]) then
           B := True
         else
           B := False;
         BB := AllowHRW;
         if (Players[CurrentPlayer].WorldInfo[2]) then
           AllowHRW := True
         else
           AllowHRW := False;
         SelectWorld(RandomWorld(B));
         AllowHRW := BB;
       end;
  end;
  if (LobbyScreen) then
    MouseBox(256, 442, 507, 478, ClickLeft);                  // Click to Play
  T := GetSystemTime + RR(50000, 70000);                      // Check Response
  repeat
    SetLength(Actions, 0);
    if (GetSystemTime > T) then           // Response                          Wait  Retrys  Action         [CurrentPlayer].Loc       Modified            By              Build #  Status
      Actions :=       ['RS2: About one minute has passed...',            0,    0,      'NextPlayer',  'Login Failed']        // September 25, 2011  Wanted          666      confirmed
    else
      case CountColor(clLoginText, 260, 115, 510, 375) of
      //-1: Actions :=   ['You need 20 combat for PvP',              0,    1,      'PlayerFalse', 'PvP warning'];        // August 7, 2011      Anonymous       660      unconfirmed
      //-1: Actions :=   ['You need skill total of 1500.',           0,    9,      'PlayerTrue',  '1500 skill club'];    // August 7, 2011      Anonymous       660      unconfirmed
        364: Actions :=  ['RS2: Error connecting',                    20000,    9,      'Exit',        'Error Connecting'];   // August 7, 2011      Anonymous       660      unconfirmed
        777: Actions :=  ['RS2: Login limit exceeded',                    0,    10,     '',            'Waiting for login.']; // August 7, 2011      Anonymous       660      unconfirmed
        850: Actions :=  ['RS2: You need skill total of 1000',            0,    9,      'PlayerTrue',  '1000 skill club'];    // August 7, 2011      Anonymous       660      unconfirmed
        951: Actions :=  ['RS2: Your account is already logged in',    5000,    0,      'PlayerTrue',  'Already logged in'];  // August 7, 2011      Anonymous       660      unconfirmed
        1028: Actions := ['RS2: You are standing in a members only area', 0,    1,      'PlayerFalse', 'In Mems-Only Area'];  // August 7, 2011      Anonymous       660      unconfirmed
        1239: Actions := ['RS2: Not a members account',                   0,    1,      'PlayerFalse', 'Non-member'];         // September 25, 2011  Wanted          666      confirmed
        1709: Actions := ['RS2: World full. Waiting in que...',        3500,    1,      'PlayerFalse', 'In full world que'];  // February 19, 20212  Wanted          701      confirmed
      end;
    if (Length(Actions) > 0) then                             // Respond
    begin
      WaitRR(500, 1500);
      PushKey(VK_Escape);
      OSI_WriteAndLog(Actions[0]);
      WaitRR(Actions[1] - 100, Actions[1] + 100);
      if (Actions[2] > 0) then
        if (Attempts < Actions[2]) then
        begin
          case Actions[0] of
            'You are standing in a members only area': begin
                                                         Players[CurrentPlayer].Member := False;
                                                         Players[CurrentPlayer].WorldInfo := [False, 0, AllowHRW];
                                                       end;
          //'You need 20 combat for PvP': Players[CurrentPlayer].WorldInfo := [Players[CurrentPlayer].Member, 0, False];
            'Not a members account': begin
                                       Players[CurrentPlayer].Member := False;
                                       Players[CurrentPlayer].WorldInfo := [False, 0, AllowHRW];
                                     end;
            'You need skill total of 1000': Players[CurrentPlayer].WorldInfo := [Players[CurrentPlayer].Member, 0, AllowHRW];
            'In full world que': begin
                                   TT := GetSystemTime + RR(120000, 180000);
                                   while (FindColor(P.X, P.Y, clLoginText, 87, 418, 231, 465) and (GetSystemTime < TT)) do
                                     WaitRR(300, 400);
                                   WaitRR(2000, 3000);
                                   if (LoggedIn) then
                                   begin
                                     Result := True;
                                     Exit;
                                   end
                                   else
                                     Continue;
                                 end;
          end;
          RetryLogin := True;
          WaitRR(2000, 3000);
          Break;
        end;
      if (Actions[4] <> '') then
        Players[CurrentPlayer].Loc := Actions[4];
      case Actions[3] of
        'PlayerFalse': NextPlayer(False);
        'PlayerTrue': NextPlayer(True);
        'Exit': Exit;
      end;
      Exit;
    end;
    Wait(100);
    Result := LoggedIn;
  until (Result);
  if (RetryLogin) then                                        // Back to lobby screen
  begin
    RetryLogin := False;
    Inc(Attempts);
    goto ProcStart;
  end;
  if (Result) then                                            // Set player start time etc.
    goto ProcStart;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ExitToLobby: Boolean;
Contributors: Wanted
Description: Logs out current active player to lobby if not unsigned.
Date Created: September 25th, 2011. By Wanted. RS2 Build 666.
Last Modified: January 11th, 2012. By Wanted. RS2 Build 697.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ExitToLobby: Boolean;
var
  P: TPoint;
begin
  repeat
    Result := LobbyScreen;
    if (Result) then
      Break;
    if (not (SetGameTab(Tab_Logout))) then
      Exit;
    WaitRR(200, 450);
    if (IsTextInAreaEx(594, 352, 690, 375, P.X, P.Y, 'obby', 75, ScreenChars, False, False, -1, 2, clWhite)) then
      MouseBox(569, 348, 714, 374, ClickLeft)
    else
      Exit;                           
    Result := WaitFunc(@LobbyScreen, True, 250, 1250, 3500, 4500);
    if (not (Result)) then
      Exit;
  until (True);
  OSI_WriteAndLog('RS2: ' + Players[CurrentPlayer].Name + ' exited to lobby.');
  IncEx(Players[CurrentPlayer].Worked, GetSystemTime - PlayerStartTime);
  PlayerStartTime := GetSystemTime;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function LeaveLobby: Boolean;
Contributors: Wanted
Description: If at the lobby screen goes back to login screen.
Date Created: September 26th, 2011. By Wanted. RS2 Build 666.
Last Modified: November 22nd, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function LeaveLobby: Boolean;
begin
  Result := (not (LobbyScreen));
  if (Result) then
    Exit;
  MouseCircle(7, 690, 34, ClickLeft);
  Result := WaitFunc(@LobbyScreen, False, 250, 500, 3500, 4500);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Logout: Boolean;
Contributors: Wanted, Anonymous.
Description: Logs out current active player.
Date Created: September 25th, 2011. By Wanted. RS2 Build 666.
Last Modified: November 22st, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Logout: Boolean;
var
  P: TPoint;
begin
  Result := False;
  IncEx(Players[CurrentPlayer].Worked, GetSystemTime - PlayerStartTime);
  PlayerStartTime := GetSystemTime;
  if (LobbyScreen) then
    Result := LeaveLobby
  else
    Result := (not (LoggedIn));
  repeat
    if (Result) then
      Break;
    if (not (SetGameTab(Tab_Logout))) then
      Exit;
    WaitRR(100, 250);
    if (IsTextInAreaEx(594, 396, 691, 419, P.X, P.Y, 'ogin', 75, ScreenChars, False, False, -1, 2, clWhite)) then
      MouseBox(568, 392, 715, 419, ClickLeft)
    else
      if (IsTextInAreaEx(MIX1, MIY1, MIX2, MIY2, P.X, P.Y, 'lick', 75, ScreenChars, False, False, -1, 2, clWhite)) then  // FIX ?
        MouseBox(569, 349, 713, 375, ClickLeft)
      else
        Exit;
    Result := WaitFunc(@LoggedIn, False, 250, 500, 3500, 4500);
    if (not (Result)) then
      Exit;
  until (True);
  OSI_WriteAndLog('RS2: Logged out ' + Copy(Capitalize(Players[CurrentPlayer].Name), 1, 4) + '.');
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SwitchToPlayer(Player: Integer; Active: Boolean): Boolean;
Contributors: Wanted
Description: Switches to player, Sets CurrentPlayer to 'Active'. True if login successful.
Date Created: September 25th, 2011. By Wanted. RS2 Build 666.
Last Modified: November 20th, 2011. By Wanted. RS2 Build 679.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SwitchToPlayer(Player: Integer; Active: Boolean): Boolean;
begin
  OSI_WriteAndLog('RS2: SwitchToPlayer(' + Players[Player].Name + ', ' + BoolToStr(Active) + ');');
  Players[CurrentPlayer].Active := Active;
  CurrentPlayer := Player;
  Result := Login;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function NextPlayer(Active: Boolean): Boolean;
Contributors: Wanted
Description: Switches to next active player, Sets CurrentPlayer to 'Active'.
True if login successful.
Date Created: August 10th, 2011. By Wanted. RS2 Build 661.
Last Modified: September 25th, 2011. By Wanted. RS2 Build 666.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function NextPlayer(Active: Boolean): Boolean;
begin
  OSI_WriteAndLog('RS2: NextPlayer(' + BoolToStr(Active) + ');');
  Logout;
  Result := SwitchToPlayer(NextActivePlayerIndex, Active);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RandomNextPlayer(Active: Boolean): Boolean;
Contributors: Wanted
Description: Switches to a random active player, Sets CurrentPlayer to 'Active'.
True if login successful.
Date Created: August 10th, 2011. By Wanted & Anonymous. RS2 Build 661.
Last Modified: September 25th, 2011. By Wanted. RS2 Build 666.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RandomNextPlayer(Active: Boolean): Boolean;
begin
  OSI_WriteAndLog('RS2: NextPlayer(' + BoolToStr(Active) + ');');
  Logout;
  Result := SwitchToPlayer(Random(Length(Players)), Active);            // FIX
end;