{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                  Bank routines
--------------------------------------------------------------------------------
 * function BankScreen: Boolean;
 * function PinScreen: Boolean;
 * function EnterBankPin(Pin: string; CheckPS: Boolean): Boolean;
 * function CloseBank(CheckBS: Boolean): Boolean;
 * function DepositAllEx(Inv, Equip, Summon, CPouch, CheckBS: Boolean): Boolean;
 * function DepositAll(CheckBS: Boolean): Boolean;
 * function DepositItemsEx(Slots: TIntArray; Exclude, CheckBS: Boolean): Boolean;
 * function DepositItems(Slots: TIntArray; CheckBS: Boolean): Boolean;
 * function DepositAllExclude(Exclude: TIntArray; CheckBS: Boolean): Boolean;
 * function ToggleUseNotes(Use: Boolean): Boolean;
 * function ToggleSwapMode(Use: Boolean): Boolean;
 * function SearchBank(SearchText: string; CheckBS: Boolean): Boolean;
 * function BankShowEquipStats(CheckBS: Boolean): Boolean;
 * function FixBank(FixUp: Boolean): Boolean;
 * function GetBankSlotIndex(Row, Column: Integer): Integer;
 * function GetBankSlotBounds(Slot: Integer): TBox;
 * function GetBankTabBounds(Tab: Integer): TBox;
 * function CordsToBankSlot(P: TPoint): Integer;
 * function BankItemExists(Slot: Integer; CheckBS: Boolean): Boolean;
 * function MouseBankItem(Slot: Integer; TypeC: ClickActions; CheckBS: Boolean): Boolean;
 * function DragBankItem(FromSlot, ToSlot: Integer; CheckBS: Boolean): Boolean;
 * function GetCurrentBankTab: Integer;
 * function BankTabExists(Tab: Integer): Boolean;
 * function SetBankTab(Tab: Integer; CheckBS: Boolean): Boolean;
 * function WithdrawEx2(Options: TStrArray; B: TBox; CheckBS: Boolean): Boolean;
 * function WithdrawEx(Amount: Integer; B: TBox; CheckBS: Boolean): Boolean;
 * function WithdrawSlotEx(Options: TStrArray; Slot: Integer; CheckBS: Boolean): Boolean;
 * function Withdraw(Amount, Slot: Integer; CheckBS: Boolean): Boolean;
 * function OpenBankBooth(Loc: Integer): Boolean;
 * function OpenBankNPC(Loc: Integer): Boolean;
 * function OpenBankEx(Loc: Integer; AllowNPC, AllowBooth, TryBoothFirst: Boolean): Boolean;
 * function OpenBank(Loc: Integer): Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BankScreen: Boolean;
Contributors: Wanted, Freddy
Description: Returns true if at the bank screen.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankScreen: Boolean;
var
  TPA: TPointArray;
  P: TPoint;
begin
  Result := False;
  FindColorEx(TPA, 4106994, 119, 25, 328, 47);
  if (Length(TPA) > 20) then
    Result := FindTextTPAInTPA('ank of', ScreenChars, TPA, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function PinScreen: Boolean;
Contributors: Wanted, Freddy
Description: Returns true if at the pin screen.
Date Created: November 8th, 2011. By Wanted. RS2 Build 676.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function PinScreen: Boolean;
var
  TPA: TPointArray;
  P: TPoint;
begin
  Result := False;
  FindColorEx(TPA, 2070783, 50, 57, 421, 79);
  if (Length(TPA) > 50) then
     Result := FindTextTPAInTPA('enter your', ScreenChars, TPA, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function EnterBankPin(Pin: string; CheckPS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Enters bank pin and returns true if succesfully entered pin and at bank screen.
Date Created: November 8th, 2011. By Wanted. RS2 Build 676.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function EnterBankPin(Pin: string; CheckPS: Boolean): Boolean;
var
  I, II, C, T: Integer;
  TPA: TPointArray;
  TBA: TBoxArray;
  P: TPoint;
begin
  Result := False;
  if (Length(Pin) <> 4) then
    Exit;
  if (CheckPS) then
    if (not (PinScreen)) then
      Exit;
  SetLength(TBA, 11);
  for I := 0 to 10 do
    TBA[I] := Box(37 + ((I mod 4) * 90), 107 + ((I div 4) * 72), 100 + ((I mod 4) * 90), 170 + ((I div 4) * 72));
  for I := 0 to 3 do
  begin
    FindColorEx(TPA, 2070783, 37, 107, 370, 314);
    if (Length(TPA) < 250) then
      Exit;
    if (not (FindTextTPAInTPA(Copy(Pin, I + 1, 1), ScreenChars, TPA, P.X, P.Y))) then
      GetMousePos(P.X, P.Y);
    for II := 0 to 10 do
      if (PointInBox(P, TBA[II])) then
        Break;
    if (II > 10) then
      Exit;
    C := CountColor(clWhite, 41, 79, 399, 105);
    T := GetSystemTime + RR(5000, 7000);
    MouseBox(TBA[II].X1, TBA[II].Y1, TBA[II].X2, TBA[II].Y2, ClickLeft);
    while ((CountColor(clWhite, 41, 79, 399, 105) = C) and (GetSystemTime < T)) do
      WaitRR(250, 400);
    WaitRR(250, 400);
  end;
  Result := WaitFunc(@BankScreen, True, 250, 400, 5000, 7000);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CloseBank(CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if at the bank screen and then closes it if open.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CloseBank(CheckBS: Boolean): Boolean;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  MouseBox(482, 28, 495, 41, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DepositAllEx(Inv, Equip, Summon, CPouch, CheckBS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Returns true if at the bank screen and then clicks deposit all.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DepositAllEx(Inv, Equip, Summon, CPouch, CheckBS: Boolean): Boolean;
var
  TBoA: TBoolArray;
  I: Integer;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  TBoA := [Inv, Equip, Summon, CPouch];
  for I := 0 to 3 do
    if (TBoA[I]) then
      MouseBox(354 + (36 * I), 298, 384 + (36 * I), 318, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DepositAll(CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if at the bank screen and then clicks deposit all.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DepositAll(CheckBS: Boolean): Boolean;
begin
  Result := DepositAllEx(True, False, False, False, CheckBS);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DepositItemsEx(Slots: TIntArray; Exclude, CheckBS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Deposits all inventory items except for excluded slots, or the other
way around if Exclude is false. True if CheckBS is true and bankscreen is found.
Date Created: December 9th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DepositItemsEx(Slots: TIntArray; Exclude, CheckBS: Boolean): Boolean;
var
  I, C, T: Integer;
  B: Boolean;
  P: TPoint;
  S: string;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  if (Length(Slots) = 0) then
  begin
    Result := DepositAll(False);
    Exit;
  end;
  for I := 0 to 27 do
    if ((TIAContains(Slots, I)) xor (Exclude)) then
      if (InvItemExists(I, False)) then
      begin
        MouseItem(I, MoveTo, False);
        GetMousePos(P.X, P.Y);
        C := InvCount(False);
        T := GetSystemTime + RR(1000, 2000);
        S := '';
        while ((GetSystemTime < T) and (S = '')) do
        begin
          S := GetUpText;
          WaitRR(50, 80);
        end;
        B := False;
        if ((InRange(Pos('t-1', S), 1, 10)) or (InRange(Pos('1', S), 1, 10)) or (InRange(Pos('-', S), 1, 10))) then
        begin
          Mouse(P.X, P.Y, 0, 0, False);
          ChooseOptionMulti(['t-A', 'All']);
          B := True;
        end
        else
          Mouse(P.X, P.Y, 0, 0, True);
        T := GetSystemTime + RR(1500, 2500);
        while ((GetSystemTime < T) and (InvCount(False) = C)) do
          WaitRR(200, 350);
        if (B) then
          WaitRR(400, 500);
      end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DepositItems(Slots: TIntArray; CheckBS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Deposits all inventory items in specified slots. True if CheckBS is
true and bankscreen is found.
Date Created: November 13th, 2011. By Wanted. RS2 Build 679.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DepositItems(Slots: TIntArray; CheckBS: Boolean): Boolean;
begin
  Result := DepositItemsEx(Slots, False, CheckBS);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DepositAllExclude(Exclude: TIntArray; CheckBS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Deposits all inventory items except for excluded slots. True if
CheckBS is true and bankscreen is found.
Date Created: November 13th, 2011. By Wanted. RS2 Build 679.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DepositAllExclude(Exclude: TIntArray; CheckBS: Boolean): Boolean;
begin
  Result := DepositItemsEx(Exclude, True, CheckBS);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ToggleUseNotes(Use: Boolean): Boolean;
Contributors: Wanted
Description: Enables or disables note usage. Returns true if toggle was needed.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: September 23rd, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ToggleUseNotes(Use: Boolean): Boolean;
begin
  Result := False;
  case GetColor(215, 301) of
    2700606: Result := not (Use);
    4806757: Result := Use;
  else
    Exit;
  end;
  if  (not (Result)) then
    Exit;
  MouseBox(213, 297, 245, 318, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ToggleSwapMode(Use: Boolean): Boolean;
Contributors: Wanted
Description: Enables or disables note usage. Returns true if toggle was needed.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: September 23rd, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ToggleSwapMode(Use: Boolean): Boolean;
begin
  Result := False;
  case GetColor(30, 300) of
    2700606: Result := not (Use);
    4806757: Result := Use;
  else
    Exit;
  end;
  if  (not (Result)) then
    Exit;
  MouseBox(29, 296, 60, 320, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SearchBank(SearchText: string; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if at bankscreen and CheckBS.
Searches for SearchText using the in bank search glass.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: November 26th, 2012. By Bixby Sayz. RS2 Build 743.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SearchBank(SearchText: string; CheckBS: Boolean): Boolean;
var
  T: Integer;  // Time counter
begin
  Result := False;
  // Check bank screen.
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  // If search dialog already open toggle it closed to clear any pre-existing
  // search text.
  if (GetColor((MBX1 + 42), (MBY2 + 11)) = 2634813) then
  begin
    MouseBox((MBX1 + 39), (MBY2 + 8), (MBX1 + 69), (MBY2 + 29), ClickLeft);
    T := GetSystemTime() + RR(2500, 3500);
    while (GetColor((MBX1 + 42), (MBY2 + 11)) = 2634813) do
    begin
      WaitRR(75, 125);
      if (GetSystemTime() > T) then
        Exit;
    end;
    WaitRR(625, 875);
  end;
  // Click search button and wait for "Enter the name" prompt to appear.
  MouseBox((MBX1 + 39), (MBY2 + 8), (MBX1 + 69), (MBY2 + 29), ClickLeft);
  T := GetSystemTime() + RR(2500, 3500);
  repeat
    WaitRR(75, 125);
    if (GetSystemTime() > T) then
      Exit;
WriteLn(IntToStr(CountColor(clBlack, (MCX1 + 84), (MCY1 + 47), (MCX1 + 186), (MCY1 + 65))));
  until (CountColor(clBlack, (MCX1 + 84), (MCY1 + 47), (MCX1 + 186), (MCY1 + 65)) = 307);
  WaitRR(625, 875);
  // Type in search text.
  TypeSend(SearchText);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BankShowEquipStats(CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if at the bank screen if CheckBS true, clicks equip stats.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankShowEquipStats(CheckBS: Boolean): Boolean;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  MouseBox(461, 48, 492, 79, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BankHideEquipStats: Boolean;
Contributors: LordJashin
Description: Returns true if at the bank screen.
Date Created: September 23rd, 2012. By LordJashin. RS2 Build 718.
Last Modified: September 23rd, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankHideEquipStats: Boolean;
begin
  Result := True; 
  if BankScreen then Exit;
  MouseBox(461, 48, 488, 73, ClickLeft);  
  WaitRR(100, 200);       
  if not BankScreen then
    Result := False;              
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FixBank(FixUp: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Scrolls bank all the way to top or bottom, true if not needed to do so.
Searches for SearchText using the in bank search glass.
Date Created: October 30th, 2011. By Wanted. RS2 Build 671.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FixBank(FixUp: Boolean): Boolean;
var
  TPA: TPointArray;
  B1, B2, B3: TBox;
begin
  Result := False;
  if (FixUp) then
    if (GetColor(489, 101) = 1250841) then
      Exit;
  if (not (FixUp)) then
    if (GetColor(489, 276) = 592137) then
      Exit;
  Result := True;
  if (not (FindColorEx(TPA, 1250841, 482, 101, 495, 276))) then
    Exit;
  B1 := TPABounds(TPA);
  if (not (FindColorEx(TPA, 592137, 482, 101, 495, 276))) then
    Exit;
  B2 := TPABounds(TPA);
  B3 := Box(482, B1.Y1, 495, B2.Y2);
  if (FixUp) then
    DragMouseBox(B3.X1, B3.Y1, B3.X2, B3.Y2, 478, 81, 502, 100, True)
  else
    DragMouseBox(B3.X1, B3.Y1, B3.X2, B3.Y2, 475, 279, 504, 300, True)
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetBankSlotIndex(Row, Column: Integer): Integer;
Contributors: Wanted
Description: Returns index of an bank slot based on row and column position.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetBankSlotIndex(Row, Column: Integer): Integer;
begin
  Result := ((((Row - 1) * 10) + Column) - 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetBankSlotBounds(Slot: Integer): TBox;
Contributors: Wanted
Description: Returns the bounds of an item in the bank slot.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: September 22nd, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetBankSlotBounds(Slot: Integer): TBox;
begin
  if Slot > 39 then Exit;
  Result := Box(MBS1 + ((Slot mod 10) * MBSR), MBS2 + ((Slot div 10) * MBSD), MBS3 + ((Slot mod 10) * MBSR), MBS4 + ((Slot div 10) * MBSD));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetBankTabBounds(Tab: Integer): TBox;
Contributors: Wanted
Description: Returns the bounds of a bank tab.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: September 22nd, 2012. By LordJashin. RS2 Build 718.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetBankTabBounds(Tab: Integer): TBox;
begin
  Result := Box(MBT1 + (Tab * MBTS), MBT2, MBT3 + (Tab * MBTS), MBT4);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CordsToBankSlot(P: TPoint): Integer;
Contributors: Wanted
Description: Returns the bank slot of a point.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CordsToBankSlot(P: TPoint): Integer;
var
  I: Integer;
  B: TBox;
begin
  Result := 0;
  for I := 0 to 27 do
  begin
    B := GetBankSlotBounds(I);
    if (PointInBox(P, B)) then
    begin
      Result := I;
      Exit;
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BankItemExists(Slot: Integer; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if there's an item in the given bank slot.
Exits if not at bankscreen and CheckBS is True.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankItemExists(Slot: Integer; CheckBS: Boolean): Boolean;
var
  P: TPoint;
  B: TBox;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  FixBank(True);
  B := GetBankSlotBounds(Slot);
  Result := FindColor(P.X, P.Y, clObjectOutline, B.X1, B.Y1, B.X2, B.Y2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseBankItem(Slot: Integer; TypeC: ClickActions; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Clicks on an item in bank. Exits if not at bankscreen and CheckBS is True.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseBankItem(Slot: Integer; TypeC: ClickActions; CheckBS: Boolean): Boolean;
var
  B: TBox;
begin
  Result := BankItemExists(Slot, CheckBS);
  if (not (Result)) then
    Exit;
  B := GetBankSlotBounds(Slot);
  MouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, TypeC);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DragBankItem(FromSlot, ToSlot: Integer; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Drags an item from one bank slot to another.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DragBankItem(FromSlot, ToSlot: Integer; CheckBS: Boolean): Boolean;
var
  B, B2: TBox;
begin
  Result := BankItemExists(FromSlot, CheckBS);
  if (not (Result)) then
    Exit;
  B := GetBankSlotBounds(FromSlot);
  B2 := GetBankSlotBounds(ToSlot);
  DragMouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, B2.X1 + 2, B2.Y1 + 2, B2.X2 - 2, B2.Y2 - 2, True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCurrentBankTab: Integer;
Contributors: Wanted
Description: Returns the current bank tab open.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCurrentBankTab: Integer;
begin
  for Result := 0 to 8 do
    if (GetColor(37 + (48 * Result), 82) = 2896954) then
      Exit;
  Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BankTabExists(Tab: Integer): Boolean;
Contributors: Wanted
Description: Returns the bank tab exists yet.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: Feburuary 7th, 2011. By Wanted. RS2 Build 700.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankTabExists(Tab: Integer): Boolean;
var
  P: TPoint;
  B: TBox;
begin
  Result := Tab = 0;
  if (Result) then
    Exit;
  B := GetBankTabBounds(Tab);
  Result := FindColor(P.X, P.Y, clObjectOutline, B.X1, B.Y1, B.X2, B.Y2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetBankTab(Tab: Integer; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if at the bank screen and CheckBS is true. Sets banktab.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 11th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetBankTab(Tab: Integer; CheckBS: Boolean): Boolean;
var
  B: TBox;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit
    else
      Result := True;
  if (Tab = GetCurrentBankTab) then
    Exit;
  if (not (BankTabExists(Tab))) then
    Exit;
  B := GetBankTabBounds(Tab);
  MouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, ClickLeft);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function WithdrawEx2(Options: TStrArray; B: TBox; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Withdraws by using MouseBox on B. Searches for your Options in ChooseOption
if it can't find it pulls the numbers out and uses them with Withdraw-X. If you
use ['-1 '] it will withdraw by left clicking one time to get one item out.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function WithdrawEx2(Options: TStrArray; B: TBox; CheckBS: Boolean): Boolean;
var
  I, H, C, CT, T: Integer;
  TBA: TBoxArray;
  WX: Boolean;
begin
  Result := False;
  if (CheckBS) then
    if (not (BankScreen)) then
      Exit;
  if (H < 0) then
    Exit;
  C := InvCount(False);
  if (not (StrContains('-1 ', Options[0]))) then
  begin
    MouseBox(B.X1, B.Y1, B.X2, B.Y2, ClickRight);
    WX := False;
    H := High(Options);
    for I := 0 to H do
      if (StrContains('-X', Options[I])) then
      begin
        WX := True;
        Break;
      end;
    if (TBoATrueAmount(OptionExistsMulti(Options, TBA)) < 1) then
      if (TBoATrueAmount(OptionExistsMulti(['w-X', '-X', 'X '], TBA)) < 1) then
        Exit
      else
        WX := True;
    MouseBox(TBA[0].X1, TBA[0].Y1, TBA[0].X2, TBA[0].Y2, ClickLeft);
    if (WX) then
    begin
      T := GetSystemTime + RR(4000, 5000);
      repeat
        CT := CountColor(clBlack, 210, 392, 309, 411);
        if (CT = 277) then
          Break;
      until (GetSystemTime > T);
      if (CT <> 277) then
        Exit;
      TypeSend(GetNumbers(Options[0]));
    end;
  end
  else
    MouseBox(B.X1, B.Y1, B.X2, B.Y2, ClickLeft);
  T := GetSystemTime + RR(2000, 3000);
  while ((GetSystemTime < T) and (InvCount(False) = C)) do
    WaitRR(100, 200);
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function WithdrawEx(Amount: Integer; B: TBox; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Withdraws by using MouseBox on B. Converts your desired amount into
the appropriate options text, uses Withdraw-X if needed. Withdraw_All etc indexes.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: January 22nd, 2012. By Wanted. RS2 Build 699.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function WithdrawEx(Amount: Integer; B: TBox; CheckBS: Boolean): Boolean;
var
  Options: TStrArray;
begin
  case Amount of
    Withdraw_1: Options := ['-1 ', 'draw-1', 'w-1'];
    Withdraw_5: Options := ['-5 ', 'draw-5', 'w-5'];
    Withdraw_10: Options := ['-10 ', 'draw-10', 'w-10'];
    Withdraw_All: Options := ['ll ', 'w-All'];
    Withdraw_All_But_One: Options := ['All b', 'l but', 'but o', 't one'];
  else
    Options := ['-' + IntToStr(Amount) + ' '];
  end;
  Result := WithdrawEx2(Options, B, CheckBS);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function WithdrawSlotEx(Options: TStrArray; Slot: Integer; CheckBS: Boolean): Boolean;
Contributors: Wanted, Freddy
Description: Withdraws by using MouseBox on slot. Searches for your Options in ChooseOption
if it can't find it pulls the numbers out and uses them with Withdraw-X. If you
use ['-1 '] it will withdraw by left clicking one time to get one item out.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function WithdrawSlotEx(Options: TStrArray; Slot: Integer; CheckBS: Boolean): Boolean;
var
  B: TBox;
begin
  Result := False;
  if (not (BankItemExists(Slot, CheckBS))) then
    Exit;
  B := GetBankSlotBounds(Slot);
  B := Box(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2);
  Result := WithdrawEx2(Options, B, False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Withdraw(Amount, Slot: Integer; CheckBS: Boolean): Boolean;
Contributors: Wanted
Description: Withdraws by using MouseBox on slot. Converts your desired amount into
the appropriate options text, uses Withdraw-X if needed. Withdraw_All etc indexes.
Date Created: December 11th, 2011. By Wanted. RS2 Build 688.
Last Modified: Apri 19th, 2011. By Wanted. RS2 Build 712.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Withdraw(Amount, Slot: Integer; CheckBS: Boolean): Boolean;
var
  B: TBox;
begin
  Result := False;
  if (not (BankItemExists(Slot, CheckBS))) then
    Exit;  
  B := GetBankSlotBounds(Slot);
  B := Box(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2);
  Result := WithdrawEx(Amount, B, False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OpenBankBooth(Loc: Integer): Boolean;
Contributors: Wanted, Freddy
Description: Opens a booth, true if bankscreen found. Use Loc_VEB etc.
Date Created: December 14th, 2011. By Wanted. RS2 Build 688.
Last Modified: November 26th, 2012. By Bixby Sayz. RS2 Build 743.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OpenBankBooth(Loc: Integer): Boolean;
var
  BankInfo: TVariantArray;
  CTS, I, H, T: Integer;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  Result := BankScreen;
  if (Result) then
    Exit;             //    0     1     2         3       4      5     6   7    8      9
  case (Loc) of       // | CTS |  CTS2 Mods  |  Color  | Tol | Split | W | H | Min  | Max  |    Modified            By              Build #
    Loc_LBC: BankInfo := [2,    0.23,  0.35,  9147035,  10,   0,      35, 35, 100,   750];   // December 14, 2011   Wanted          688
    Loc_AKB: BankInfo := [2,    0.15,  0.09,  3883077,  14,   0,      35, 35, 100,   900];   // December 14, 2011   Wanted          688
    Loc_FEB,{BankInfo := [2,    0.06,  0.21,  5272464,  4,    1,      4,  15, 250,   800];}  // December 14, 2011   Wanted          688
    Loc_FWB: BankInfo := [2,    0.06,  0.21,  5272464,  4,    1,      4,  15, 250,   800];   // December 14, 2011   Wanted          688
    Loc_VEB: BankInfo := [2,    0.07,  1.59,  2181720,  5,    0,      35, 45, 350,   99999]; // December 14, 2011   Wanted          688
    Loc_VWB: BankInfo := [2,    0.09,  0.45,  3235696,  3,    0,      35, 35, 150,   600];   // December 14, 2011   Wanted          688
    Loc_DYB,{BankInfo := [2,    0.37,  0.48,  4083025,  2,    0,      35, 35, 500,   99999];}// December 14, 2011   Wanted          688
    Loc_EVB: BankInfo := [2,    0.37,  0.48,  4083025,  2,    0,      35, 35, 500,   99999]; // December 14, 2011   Wanted          688
  else
    Exit;
  end;
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(BankInfo[0]);
  SetColorSpeed2Modifiers(BankInfo[1], BankInfo[2]);
  FindColorSpiralTolEx(MSCX, MSCY, TPA, BankInfo[3], MSX1, MSY1, MSX2, MSY2, BankInfo[4]);
  SetColorspeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(CTS);
  if (Length(TPA) < 1) then
    Exit;
  case (BankInfo[5]) of
    0: ATPA := GroupTPAEx(TPA, BankInfo[6], BankInfo[7]);
    1: ATPA := SplitTPA(TPA, BankInfo[6]);
    2: ATPA := SplitTPAEx(TPA, BankInfo[6], BankInfo[7]);
  end;
  if (Length(ATPA) < 1) then
    Exit;
  {$IFDEF SCAR338_UP}
    SortATPAByMeanEx(ATPA, Point(MSCX, MSCY));
  {$ELSE}
    SortATPAByMiddleEx(ATPA, Point(MSCX, MSCY));
  {$ENDIF}
  //DebugATPABounds(ATPA);
  H := High(ATPA);
  //for I := 0 to High(ATPA) do
    //OSI_WriteAndLog(IntToStr(I) + ', ' + IntToStr(Length(ATPA[I])));
  for I := 0 to High(ATPA) do
    if (InRange(Length(ATPA[I]), BankInfo[8], BankInfo[9])) then
    begin
      {$IFDEF SCAR338_UP}
        P := TPAMean(ATPA[I]);
      {$ELSE}
        P := TPAMiddle(ATPA[I]);
      {$ENDIF}
      MMouse(P.X, P.Y, 2, 2);
      if ((Loc = Loc_DYB) or (Loc = Loc_EVB)) then
      begin
        if (not (IsUpTextMulti(['Bank C', 'k Coun', 'ounter']))) then
          Continue;
      end
      else
        if (not (IsUpTextMulti(['ank B', 'k Ban', 'Bank b', 'k boot', 'booth']))) then
          Continue;
      GetMousePos(P.X, P.Y);
      Mouse(P.X, P.Y, 0, 0, True);
      if (WaitFunc(@FlagExists, True, 100, 200, 500, 1000)) then
        Flag;
      WaitRR(200, 400);
      T := GetSystemTime + RR(5000, 7000);
      repeat
        if (PinScreen) then
          if (not (EnterBankPin(Players[CurrentPlayer].Pin, False))) then
          begin
            OSI_WriteAndLog('Pin failed!');
            Exit;
          end
          else
          begin
            Result := True;
            Exit;
          end;
        if (BankScreen) then
        begin
          Result := True;
          Exit;
        end;
        WaitRR(250, 400);
      until (GetSystemTime > T);
      Exit;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OpenBankNPC(Loc: Integer): Boolean;
Contributors: Wanted, Freddy
Description: Opens a bank via Banker, true if bankscreen found. Use Loc_VEB etc.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: November 26th, 2012. By Bixby Sayz. RS2 Build 743.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OpenBankNPC(Loc: Integer): Boolean;
var
  BankerInfo: TVariantArray;
  I, H, T, CTS: Integer;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  TBA: TBoxArray;
  P: TPoint;
begin
  Result := BankScreen;
  if (Result) then
    Exit;               //    0     1     2         3       4
  case (Loc) of         // | CTS |  CTS2 Mods  |  Color  | Tol    Modified            By              Build #
    Loc_LBC,{BankerInfo := [2,    0.48, 0.06,   6776940,  7];} // December 22, 2011   Wanted          690
    Loc_FEB,{BankerInfo := [2,    0.48, 0.06,   6776940,  7];} // December 22, 2011   Wanted          690
    Loc_FWB,{BankerInfo := [2,    0.48, 0.06,   6776940,  7];} // December 22, 2011   Wanted          690
    Loc_AKB: BankerInfo := [2,    0.48, 0.06,   6776940,  7];  // December 22, 2011   Wanted          690
    Loc_EVB,{BankerInfo := [2,    0.14, 0.76,   4533556,  11];}// December 22, 2011   Wanted          690
    Loc_VEB,{BankerInfo := [2,    0.14, 0.76,   4533556,  11];}// December 22, 2011   Wanted          690
    Loc_VWB: BankerInfo := [2,    0.14, 0.76,   4533556,  11]; // December 22, 2011   Wanted          690
    Loc_DYB: BankerInfo := [2,    0.21, 0.07,   7633020,  20]; // December 22, 2011   Wanted          690
    Loc_GEB: BankerInfo := [2,    0.42, 0.14,   6053473,  6];  // December 22, 2011   Wanted          690
  else
    Exit;
  end;
  ATPA := FindMMDotsExOverLap([cldYellowDot]);
  TPA := MMsToMSs(ATPA[0]);
  SortTPAEx(TPA, Point(MSCX, MSCY));
  H := High(TPA);
  SetLength(TBA, H + 1);
  for I := 0 to H do
    TBA[I] := Box(TPA[I].X - 30, TPA[I].Y - 30, TPA[I].X + 30, TPA[I].Y + 30);
  ConstrainBoxes(TBA, MSX1, MSY1, MSX2, MSY2);
  for I := 0 to H do
  begin
    CTS := GetColorToleranceSpeed;
    ColorToleranceSpeed(BankerInfo[0]);
    SetColorSpeed2Modifiers(BankerInfo[1], BankerInfo[2]);
    FindColorTolEx(TPA, BankerInfo[3], TBA[I].X1, TBA[I].Y1, TBA[I].X2, TBA[I].Y2, BankerInfo[4]);
    SetColorspeed2Modifiers(0.2, 0.2);
    ColorToleranceSpeed(CTS);
    ATPA := SplitTPA(TPA, 5);
    if (Length(ATPA) < 1) then
      Continue;
    SortATPASize(ATPA, True);
    {$IFDEF SCAR338_UP}
      P := TPAMean(ATPA[0]);
    {$ELSE}
      P := TPAMiddle(ATPA[0]);
    {$ENDIF}
    MMouse(P.X, P.Y, 0, 0);
    if (not (IsUpTextMulti(['to B', 'anker']))) then
      Continue;
    GetMousePos(P.X, P.Y);
    Mouse(P.X, P.Y, 0, 0, False);
    if (not (ChooseOptionMulti(['Bank B', 'k B']))) then
      Continue;
    if (WaitFunc(@FlagExists, True, 100, 200, 500, 1000)) then
      Flag;
    WaitRR(200, 400);
    T := GetSystemTime + RR(5000, 7000);
    repeat
      if (PinScreen) then
        if (not (EnterBankPin(Players[CurrentPlayer].Pin, False))) then
        begin
          OSI_WriteAndLog('Pin failed!');
          Exit;
        end
        else
        begin
          Result := True;
          Exit;
        end;
      if (BankScreen) then
      begin
        Result := True;
        Exit;
      end;
      WaitRR(250, 400);
    until (GetSystemTime > T);
    Continue;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OpenBankEx(Loc: Integer; AllowNPC, AllowBooth, TryBoothFirst: Boolean): Boolean;
Contributors: Wanted
Description: Opens bank using custom settings, true if bankscreen found. Use Loc_VEB etc.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OpenBankEx(Loc: Integer; AllowNPC, AllowBooth, TryBoothFirst: Boolean): Boolean;
begin
  Result := False;
  if (not (AllowBooth)) then
    TryBoothFirst := False;
  if (TryBoothFirst) then
  begin
    if (not (OpenBankBooth(Loc))) then
      if (AllowNPC) then
      begin
        if (not (OpenBankNPC(Loc))) then
          Exit;
      end
      else
        Exit;
    Result := True;
    Exit;
  end
  else
  begin
    if (not (OpenBankNPC(Loc))) then
      if (AllowBooth) then
      begin
        if (not (OpenBankBooth(Loc))) then
          Exit;
      end
      else
        Exit;
    Result := True;
    Exit;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OpenBank(Loc: Integer): Boolean;
Contributors: Wanted
Description: Opens bank using recommended settings, true if bankscreen found. Use Loc_VEB etc.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OpenBank(Loc: Integer): Boolean;
begin
  case (Loc) of
    Loc_DYB, Loc_EVB, Loc_AKB: Result := OpenBankEx(Loc, True, True, False);
  else
    Result := OpenBankEx(Loc, True, True, True);
  end;
end;

//OpenChest
//DepositScreen
//OpenDepositBox
//WalkInBank