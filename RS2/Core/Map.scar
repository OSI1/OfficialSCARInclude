{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                  Map Routines
--------------------------------------------------------------------------------
 * function  OnMM(X, Y: Integer): Boolean;
 * function  MMToMSEx(MM: TPoint; Height: Extended): TPoint;
 * function  MMToMS(MM: TPoint): TPoint;
 * function  MMOnMS(MM: TPoint): Boolean;
 * function  MMsToMSs(TPA: TPointArray): TPointArray;
 * function  FilterMMPointsMS(TPA: TPointArray): TPointArray;
 * function  FindMMColorTol(var X, Y: Integer; Color, Tol: Integer): Boolean;
 * function  FindMMColorTolEx(var Points: TPointArray; Color, Tol: Integer): Boolean;
 * function  GetCompassAngleRadians: Extended;
 * function  GetCompassAngleDegress: Extended;
 * function  MakeCompass(Angle: Extended): Boolean;
 * procedure SetAngle(Highest: Boolean);
 * procedure ClickCompass(AdjustToHigh: Boolean);
 * function  FindFlag(var X, Y: Integer): Boolean;
 * function  FlagExists: Boolean;
 * function  GetFlagDistanceEx(FromX, FromY: Extended): Extended;
 * function  GetFlagDistance: Extended;
 * function  FlagEx(Distance: Extended): Boolean;
 * function  Flag: Boolean;
 * function  MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
 * function  MouseFlag(X, Y, RX, RY: Integer): Boolean;
 * function  FindMMDotsExOverlap(ColorDiffs: TIntArray): T2DPointArray;
 * function  FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
 * function  FindMMDots(cldDot: Integer): TPointArray;
 * function  CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
 * function  CountMMDotsEx(ColorDiffs: TIntArray): Integer;
 * function  CountMMDots(cldDot: Integer): Integer;
 * function  RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OnMM(X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if point is on the minimap.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OnMM(X, Y: Integer): Boolean;
begin
  Result := (DistanceEx(X, Y, MMCXe, MMCYe) < MMRDe);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMToMSEx(MM: TPoint; Height: Extended): TPoint;
Contributors: Home
Description: Transforms a point on the minimap to where it would be on the mainscreen.
Date Created: December 5th, 2011. By Home. RS2 Build 688.
Last Modified: December 5th, 2011. By Home. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMToMSEx(MM: TPoint; Height: Extended): TPoint;
 Var
  X, Y :Extended;
begin
  X := (((MM.X - MMCXe) * 9.81119354838709677419354838709677) + 258.531);
  Y := (((MM.Y - MMCYe) * 8.84193548387096774193548387096777) + 175.341);
  Result := Point(Round(X), Round(Y - Height));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMToMS(MM: TPoint): TPoint;
Contributors: Home
Description: Transforms a point on the minimap to where it would be on the mainscreen.
Date Created: December 5th, 2011. By Home. RS2 Build 688.
Last Modified: December 5th, 2011. By Home. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMToMS(MM: TPoint): TPoint;
begin
 Result := MMToMSEx(MM, 14.5);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMOnMS(MM: TPoint): Boolean;
Contributors: Wanted
Description: Returns true if a MM point would be on the MS.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMOnMS(MM: TPoint): Boolean;
begin
  Result := PointInBox(MMToMS(MM), Box(MSX1, MSY1, MSX2, MSY2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMsToMSs(TPA: TPointArray): TPointArray;
Contributors: Wanted
Description: Outputs MM points that are on MS as MS points.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMsToMSs(TPA: TPointArray): TPointArray;
var
  I, H, L: Integer;
  P: TPoint;
begin
  H := High(TPA);
  L := 0;
  for I := 0 to H do
  begin
    P := MMToMS(TPA[I]);
    if (not (PointInBox(P, Box(MSX1, MSY1, MSX2, MSY2)))) then
      Continue;
    Inc(L);
    SetLength(Result, L);
    Result[L - 1] := P;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FilterMMPointsMS(TPA: TPointArray): TPointArray;
Contributors: Wanted
Description: Filters out points that would not be on the main screen. Returns MM points.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FilterMMPointsMS(TPA: TPointArray): TPointArray;
var
  I, H, L: Integer;
begin
  Result := [];
  H := High(TPA);
  L := 0;
  for I := 0 to H do
  begin
    if (not (MMOnMS(TPA[I]))) then
      Continue;
    Inc(L);
    SetLength(Result, L);
    Result[L - 1] := TPA[I];
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorTol(var X, Y: Integer; Color, Tol: Integer): Boolean;
Contributors: Wanted, Freddy
Description: Finds color within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorTol(var X, Y: Integer; Color, Tol: Integer): Boolean;
begin
  Result := FindColorCircleTol(X, Y, Color, Tol, MMCX, MMCY, MMRD);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorTolEx(var Points: TPointArray; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds colors within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorTolEx(var Points: TPointArray; Color, Tol: Integer): Boolean;
begin
  Result := FindColorCircleTolEx(Points, Color, Tol, MMCX, MMCY, MMRD);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleRadians: Extended;
Contributors: Wanted, Wizzup, Freddy.
Description: Gets the compass angle in radians.
Date Created: November 22nd, 2011. By Wanted. RS2 Build 682.
Last Modified: November 26th, 2012. By Bixby Sayz. RS2 Build 743.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleRadians: Extended;
var
  TPA: TPointArray;
  P: TPoint;
begin
  FindColorEx(TPA, 65536, 528, 9, 559, 41);
  FilterPointsDist(TPA, 0, 16, 543.5, 25);
  {$IFDEF SCAR338_UP}
    P := TPAMean(TPA);
  {$ELSE}
    P := TPAMiddle(TPA);
  {$ENDIF}
  Result := (ArcTan2(-(P.Y - 23.5), P.X - 542.5) - (Pi / 2));
  if (Result < 0) then
    Result := Result + Radians(360);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleDegrees: Extended;
Contributors: Anonymous, Wanted.
Description: Gets the compass angle in degrees.
Date Created: August 6th, 2011. By Anonymous. RS2 Build 660.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(GetCompassAngleRadians);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MakeCompass(Angle: Extended): Boolean;
Contributors: Wanted, Nielsie95, Nava2, Freddy.
Description: Rotates the compass using the arrow keys to the desired angle.
Date Created: November 4th, 2011. By Wanted. RS2 Build 675.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MakeCompass(Angle: Extended): Boolean;
var
  InitialAngle, DesiredAngle, CurrentAngle: Extended;
  T: LongInt;
  Left: Boolean;
begin
  Result := False;
  InitialAngle := GetCompassAngleDegrees;
  if (InitialAngle < 0) then
    Exit;
  DesiredAngle := FixD(Angle);
  if ((MinE(Abs(InitialAngle - DesiredAngle), MinE(Abs(InitialAngle - (DesiredAngle + 360.0)), Abs((InitialAngle + 360.0) - DesiredAngle)))) <= 7.0) then
  begin
    Result := True;
    Exit;
  end;
  Left := (Round((360 - InitialAngle) + DesiredAngle) mod 360 <= Round((InitialAngle + 360) - DesiredAngle) mod 360);
  VKeyDown((Integer(not Left) * 2) + 37);
  T := GetSystemTime + RR(12000, 14000);
  repeat
    Wait(1);
    CurrentAngle := GetCompassAngleDegrees;
    Result := (MinE(Abs(CurrentAngle - DesiredAngle), MinE(Abs(CurrentAngle - (DesiredAngle + 360)), Abs((CurrentAngle + 360) - DesiredAngle))) <= 7.0);
    if (Result) then
      Break;
  until (GetSystemTime > T);
  VKeyUp((Integer(not Left) * 2) + 37);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SetAngle(Highest: Boolean);
Contributors: Naum, Wanted, Freddy.
Description: Tilts the camera angle.
Date Created: August 6th, 2011. By Naum. RS2 Build 660.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SetAngle(Highest: Boolean);
begin
  VKeyDown((Integer(not (Highest)) * 2) + 38);
  WaitRR(1000, 1500);
  VKeyUp((Integer(not Highest) * 2) + 38);
  WaitRR(400, 600);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ClickCompass(AdjustToHigh: Boolean);
Contributors: Wanted
Description: Clicks to face north and then tilts the camera angle if desired.
Date Created: November 4th, 2011. By Wanted. RS2 Build 675.
Last Modified: November 11th, 2011. By Wanted. RS2 Build 677.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ClickCompass(AdjustToHigh: Boolean);
begin
  repeat
    if (not ((InRange(Round(GetCompassAngleDegrees), 7, 353)))) then
      Break;
    case Random(10) of
      0: begin
           MouseCircle(18, 543, 25, ClickRight);
           if (not (ChooseOptionMulti(['ace', 'orth']))) then
           Exit;
         end;
    else
      MouseCircle(18, 543, 25, ClickLeft);
    end;
  until (True);
  if (AdjustToHigh) then
    SetAngle(True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindFlag(var X, Y: Integer): Boolean;
Contributors: Wanted, Freddy
Description: Returns true if flag exists and the cord of the lowest point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindFlag(var X, Y: Integer): Boolean;
var
  Map: TSCARBitmap;
  Client: TSCARClient;
  I, H: Integer;
  TPA: TPointArray;
begin
  Result := False;      
  Map := GetClient.CaptureEx(MMX1, MMY1, MMX2, MMY2);  
  try
    Client := SetClient(TSCARBitmapClient.Create(Map));  
    try
      FindColorEx(TPA, 65536, 0, 0, Map.Width - 1, Map.Height - 1);      
    finally  
      SetClient(Client).Free;  
    end;  
    FilterPointsDist(TPA, 0, MMRDe, Map.Width / 2, Map.Height / 2); 
    H := High(TPA)
    for I := 0 to H do    
      if (TIAContains([6185313, 6381921], Map.Pixels[TPA[I].X - 1, TPA[I].Y - 1] - Map.Pixels[TPA[I].X, TPA[I].Y - 1])) then
      begin
        Result := True;
        X := TPA[I].X + MMX1;
        Y := TPA[I].Y + MMY1;
        Break;
      end;  
  finally
    Map.Free;  
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagExists: Boolean;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: December 6th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagExists: Boolean;
var
  P: TPoint;
begin
  Result := FindFlag(P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
Contributors: Wanted
Description: Returns flag distance from point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
var
  P: TPoint;
begin
  Result := 0.0;
  if (not (FindFlag(P.X, P.Y))) then
  begin
    Result := 0;
    Exit;
  end;
  Result := DistanceEx(FromX, FromY, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistance: Extended;
Contributors: Wanted
Description: Returns flag distance from your location (MMCX, MMCY).
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistance: Extended;
begin
  Result := GetFlagDistanceEx(MMCX, MMCY);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagEx(Distance: Extended): Boolean;
Contributors: Wanted
Description: Waits until your within Distance of flag. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagEx(Distance: Extended): Boolean;
var
  T: LongInt;
begin
  Result := False;
  T := GetSystemTime + RR(25000, 30000);
  while (GetFlagDistance > Distance) do
  begin
    if (GetSystemTime > T) then
      Exit;
    WaitRR(100, 200);
  end;
  Result := True;
  if (Distance < 10.5) then
    if (IsRunning) then
      WaitRR(1050 - Round(Distance * 100), 1150 - Round(Distance * 100))
    else
      WaitRR(1350 - Round(Distance * 128), 1450 - Round(Distance * 128));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Flag: Boolean;
Contributors: Wanted
Description: Waits until you're done moving. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Flag: Boolean;
begin
  Result := FlagEx(0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does FlagEx.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
var
  P: TPoint;
begin
  Result := False;
  P := RRectanglePoint(X - RX, Y - RY, X + RX, Y + RY);
  if (PointInBox(Point(P.X, P.Y), IntToBox(MMCX, MMCY, MMCX + 3, MMCY + 3))) then
    Exit;
  if (not (OnMM(P.X, P.Y))) then
    Exit;
  Mouse(P.X, P.Y, 0, 0, True);
  if (not (WaitFunc(@FlagExists, True, 100, 200, 4000, 5000))) then
    Exit;
  Result := FlagEx(Distance);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlag(X, Y, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does Flag.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlag(X, Y, RX, RY: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, RX, RY, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMDotsExOverlap(ColorDiffs: TIntArray): T2DPointArray;
Contributors: Wanted, Freddy
Description: Finds all MMDots you specify i.e. cldWhiteDot etc. see Global.scar
This one uses overlapping checking, so it's twice as slow.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMDotsExOverlap(ColorDiffs: TIntArray): T2DPointArray;
var
  Map: TSCARBitmap;
  Client: TSCARClient;
  I, II, H, HH, C, O: Integer;
  Offset: T2DPointArray;
  TPA: TPointArray;
  L: TIntArray;
  B: Boolean;
begin
  Result := [TPointArray([])];
  HH := High(ColorDiffs);
  SetLength(Result, HH + 1);
  SetLength(L, HH + 1);
  if (HH < 0 ) then
    Exit;
  Map := GetClient.CaptureEx(MMX1 - 2, MMY1 - 2, MMX2 + 2, MMY2 + 2);       
  try             
    Client := SetClient(TSCARBitmapClient.Create(Map));   
    try
      FindColorEx(TPA, 65536, 3, 3, Map.Width - 3, Map.Height - 3);   
    finally
      SetClient(Client).Free;
    end; 
    FilterPointsDist(TPA, 0, MMRDe, (Map.Width / 2) - 2, (Map.Height / 2) - 2);
    H := High(TPA);
    Offset := [TPointArray([Point(-2, 0), Point(-1, 0)]), TPointArray([Point(0, -2), Point(0, -1)])];
    if (H > 0) then
      for I := 0 to H do
        for O := 0 to 1 do
        begin
          C := (Map.Pixels[TPA[I].X + Offset[O][0].X, TPA[I].Y + Offset[O][0].Y] - Map.Pixels[TPA[I].X + Offset[O][1].X, TPA[I].Y + Offset[O][1].Y]);
          B := False;
          for II := 0 to HH do
            if (C = ColorDiffs[II]) then
            begin
              B := True;
              Inc(L[II]);
              SetLength(Result[II], L[II]);
              Result[II][L[II] - 1] := Point(TPA[I].X + MMX1 - 4, TPA[I].Y + MMY1 - 4);
              Break;
            end;
          if (B) then
            Break;
        end;  
  finally   
    Map.Free;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
Contributors: Wanted, Freddy
Description: Finds all MMDots you specify i.e. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
var                  
  Map: TSCARBitmap;
  Client: TSCARClient;
  I, II, H, HH, C: Integer;
  L: TIntArray;
  TPA: TPointArray;
begin
  Result := [TPointArray([])];
  HH := High(ColorDiffs);
  SetLength(Result, HH + 1);
  SetLength(L, HH + 1);
  if (HH < 0 ) then
    Exit;       
  Map := GetClient.CaptureEx(MMX1 - 2, MMY1 - 2, MMX2 + 2, MMY2 + 2);       
  try             
    Client := SetClient(TSCARBitmapClient.Create(Map));   
    try
      FindColorEx(TPA, 65536, 3, 3, Map.Width - 3, Map.Height - 3);   
    finally
      SetClient(Client).Free;
    end; 
    FilterPointsDist(TPA, 0, MMRDe, (Map.Width / 2) - 2, (Map.Height / 2) - 2);
    H := High(TPA);
    if (H > 0) then
      for I := 0 to H do
      begin
        C := (Map.Pixels[TPA[I].X - 2, TPA[I].Y] - Map.Pixels[TPA[I].X - 1, TPA[I].Y]);
        for II := 0 to HH do
          if (C = ColorDiffs[II]) then
          begin
            Inc(L[II]);
            SetLength(Result[II], L[II]);
            Result[II][L[II] - 1] := Point(TPA[I].X + MMX1 - 4, TPA[I].Y + MMY1 - 4);
            Break;
          end;
      end; 
  finally   
    Map.Free;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMDots(cldDot: Integer): TPointArray;
Contributors: Wanted
Description: Finds all of the MMDot that you specify i.e. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMDots(cldDot: Integer): TPointArray;
var
  ATPA: T2DPointArray;
begin
  ATPA := FindMMDotsEx([cldDot]);
  Result := ATPA[0];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
Contributors: Wanted, Freddy
Description: Counts all the dots of different colors you specify. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
var
  ATPA: T2DPointArray;
  I, H: Integer;
begin
  H := High(ColorDiffs);
  SetLength(Result, H + 1);
  ATPA := FindMMDotsEx(ColorDiffs);
  for I := 0 to H do
    Result[I] := Length(ATPA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDotsEx(ColorDiffs: TIntArray): Integer;
Contributors: Wanted, Freddy
Description: Counts all the dots of different colors you specify. And then adds
them together for a total number. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDotsEx(ColorDiffs: TIntArray): Integer;
var
  TIA: TIntArray;
  I, H: Integer;
begin
  Result := 0;
  TIA := CountMMDotsEx2(ColorDiffs);
  H := High(TIA);
  for I := 0 to H do
    IncEx(Result, TIA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDots(cldDot: Integer): Integer;
Contributors: Wanted
Description: Counts all the dots of the color you specify. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDots(cldDot: Integer): Integer;
begin
  Result := CountMMDotsEx([cldDot]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: Turns a road TPA into a pie slice, finds the middle and offsets,
and finally walks to it. See the online manual and forums for help using correctly.
Date Created: November 3rd, 2011. By Wanted. RS2 Build 674.
Last Modified: November 26th, 2012. By Bixby Sayz. RS2 Build 743.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
var
  ATPA: T2DPointArray;
  P: TPoint;
begin
  Result := False;
  FilterPointsPie(TPA, SRad, ERad, SAng, EAng, MMCX, MMCY);
  ATPA := SplitTPA(TPA, 3);
  SortATPASize(ATPA, True);
  if (Length(ATPA) < 1) then
    Exit;
  TPA := ATPA[0];
  {$IFDEF SCAR338_UP}
    P := TPAMean(TPA);
  {$ELSE}
    P := TPAMiddle(TPA);
  {$ENDIF}
  IncEx(P.X, XOffset);
  IncEx(P.Y, YOffset);
  Result := MouseFlagEx(P.X, P.Y, RX, RY, FlagD);
end;