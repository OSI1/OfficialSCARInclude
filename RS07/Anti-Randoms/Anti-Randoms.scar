{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Runescape 07
                             Random Solving Routines
--------------------------------------------------------------------------------
 * type TRS07Random, TRS07RandomArray.
 * var  TRS07Randoms: TRS07RandomArray;
 * var  OverideRandInvTab: Boolean;
 * function FindRandomEventItems: Boolean;
 * function  GetMissingTabs: TIntegerArray;
 * procedure InitiateAntiRandoms;
 * function  OSIFindRandoms: Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{$I Abyssal.scar}
{$I Box.scar}
{$I Capn-Arnav.scar}
{$I Certer.scar}
{$I Demon.scar}
{$I Evil-Bob.scar}
{$I Forester.scar}
{$I Frog.scar}
{$I Leo.scar}
{$I Maze.scar}
{$I Mime.scar}
{$I Mordaut.scar}
{$I Pinball.scar}
{$I Prison-Pete.scar}
{$I Quiz.scar}
{$I Sandwich.scar}

// Trades
// Fights
// Talks
// Dwarfs
// Ricks
// Old men
// Jekylls
// Lamps
// Boxes 
// PMods
// JMods
// Deaths
// Rods
// Wirlpools
// Axes
// Picks
// Birdsnest
// Gas
// Ents

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
type TRS07Random, TRS07RandomArray.
Contributors: Wanted, Freddy
Description: Type used to store random information
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

type
  TRS07Random = record
    Name: string;
    TabsMissing: TIntArray;
    InRandom, SolveRandom: function: Boolean;
  end;
  TRS07RandomArray = array of TRS07Random;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
var RS07Randoms: TRS07RandomArray;
Contributors: Wanted
Description: Variable used to store random information.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

var
  RS07Randoms: TRS07RandomArray;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
var OverideRandInvTab: Boolean;
Contributors: Wanted
Description: Variable used to allow people to disable antirandoms from checking gametab.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: December 1st, 2011. By Wanted. RS2 Build 687.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

//var
  //OverideRandInvTab: Boolean;                   FIX

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindRandomEventItems: Boolean;
Contributors: Wanted
Description: Finds and solves random event gifts.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindRandomEventItems: Boolean;
begin
  Result := False;
  //if (not (OverideRandInvTab)) then          FIX
    //SetGameTab(Tab_Inv);                     FIX
  //if (GetCurrentTab <> Tab_Inv) then         FIX
    //Exit;                                    FIX
  Result := Box_InRandom;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure InitiateAntiRandoms;
Contributors: Wanted
Description: Loads out all the antirandom information.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure InitiateAntiRandoms;
begin
  SetLength(RS07Randoms, 15);
  with RS07Randoms[0] do
  begin
    Name := 'Abyssal';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[Tab_Magic] do
  begin
    Name := 'Cap''n Arnav';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;  
  with RS07Randoms[2] do
  begin
    Name := 'Certer';
    TabsMissing := [Tab_Magic]; //all top row, all bottom except for clan, friends, ignore, logout, and music
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[3] do
  begin
    Name := 'Demon';       //all top row, all bottom except for clan, friends, ignore, logout, and music
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[4] do
  begin
    Name := 'Evil Bob';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[5] do
  begin
    Name := 'Freaky Forester';
    TabsMissing := [Tab_Magic];  //none
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[6] do
  begin
    Name := 'Frog';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[7] do
  begin
    Name := 'Leo the Grave Digger';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[8] do
  begin
    Name := 'Maze';
    TabsMissing := [Tab_Magic];       //all top row, all bottom except for clan, friends, ignore, logout, and music
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[9] do
  begin
    Name := 'Mime';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[10] do
  begin
    Name := 'Mordaut Surprise Exam';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[11] do
  begin
    Name := 'Pinball';
    TabsMissing := [Tab_Magic];  //Enitre top row, none bottom
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[12] do
  begin
    Name := 'Prison Pete';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[13] do
  begin
    Name := 'Quiz';
    TabsMissing := [Tab_Magic];  //all top row, all bottom except for clan, friends, ignore, logout, and music
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS07Randoms[14] do
  begin
    Name := 'Sandwich Lady';
    TabsMissing := [Tab_Magic];
    InRandom := nil;
    SolveRandom := nil;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetMissingTabs: TIntArray;
Contributors: Wanted, Freddy
Description: Used for counting missing tabs for comparison in OSIFindRandoms.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetMissingTabs: TIntArray;
var
  I, L, H: Integer;
begin
  Result := [];
  L := 0;    
  H := Tab_Count - 1;
  for I := 0 to H do
    Wait(1); // FIX
  {  if (not (TabExists(I))) then
    begin
      Inc(L);
      SetLength(Result, L);
      Result[L - 1] := I;
    end;
  if (Length(Result) > 0) then
    if (BankScreen) then
      Result := [];                          FIX }
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OSIFindRandoms: Boolean;
Contributors: Wanted, Freddy
Description: Handles all of OSI's RS07 anti-random rountines.
Date Created: August 7th, 2011. By Wanted. RS2 Build 660.
Last Modified: February 25th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OSIFindRandoms: Boolean;
var
  //InitCompassAngle: Extended;                      FIX
  MissingTabs: TIntArray;
  RandomSolved, B: Boolean;
  I, H: Integer;
begin
  Result := False;
  MissingTabs := GetMissingTabs;
  RandomSolved := False;
  H := High(RS07Randoms);
  for I := 0 to H do
    if (RS07Randoms[I].InRandom <> nil) then
      if (TIAContains(RS07Randoms[I].TabsMissing, Length(MissingTabs))) then
      begin
        Result := RS07Randoms[I].InRandom();
        if (Result) then
        begin
          Players[CurrentPlayer].Rand := RS07Randoms[I].Name;
          WriteLn(RS07Randoms[I].Name + ' random detected!');
          if (RS07Randoms[I].SolveRandom <> nil) then
          begin
            //InitCompassAngle := GetCompassAngleDegrees;         FIX
            if (not (RS07Randoms[I].SolveRandom())) then
            begin
              WriteLn(RS07Randoms[I].Name + ' random solver failed! Needs fixing by an expert!');
              WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
              WriteLn('Player stuck in ' + RS07Randoms[I].Name + ' random.');
              Players[CurrentPlayer].Active := False;
              //Logout;                                          FIX
              Exit;
            end
            else
            begin
              RandomSolved := True;
              Break;
            end;
          end
          else
          begin
            WriteLn(RS07Randoms[I].Name + ' random solver either doesn''t exist yet or has been disabled.');
            WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
            WriteLn('Player stuck in ' + RS07Randoms[I].Name + ' random.');
            Players[CurrentPlayer].Active := False;
            //Logout;                                          FIX
            Exit;
          end;
        end;
      end;
  if ((Length(MissingTabs) > 5) or (TIAContains(MissingTabs, Tab_Magic))) then
    if (not (RandomSolved)) then
    begin
      Result := True;
      WriteLn('Unknown random deteced! Detection and solver needs to be made by an expert!');
      WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
      WriteLn('Player stuck in unknown random.');
      Players[CurrentPlayer].Rand := 'Unknown random';
      Players[CurrentPlayer].Active := False;
      //Logout;                                                 FIX
      Exit;
    end;
  if (RandomSolved) then
  begin
    WaitRR(2000, 3000);
    //MakeCompass(InitCompassAngle);                           FIX
  end;
  //ClickContinueEx(True, True);                               FIX
  B := FindRandomEventItems;
  if (not (Result)) then
    Result := B;
end;