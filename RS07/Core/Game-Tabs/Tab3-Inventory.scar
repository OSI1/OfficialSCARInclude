{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Runescape 07
                             Inventory Tab 3 Routines
--------------------------------------------------------------------------------
 * function GetAllInvSlotBounds: TBoxArray;
     By: Wanted
 * function InvSlotsBounds: TBox;
     By: Wanted  
 * function GetInvSlotsBounds(Slots: TIntegerArray): TBoxArray;
     By: Wanted
 * function GetInvSlotBounds(Slot: Integer): TBox;
     By: Wanted
 * function CordsToInvSlot(P: TPoint): Integer;
     By: Wanted
 * function InvItemExists(Slot: Integer; CheckIT: Boolean): Boolean;
     By: Wanted
 * function InvCount(CheckIT: Boolean): Integer;
     By: Wanted
 * function InvFull(CheckIT: Boolean): Boolean;
     By: Wanted
 * function InvEmpty(CheckIT: Boolean): Boolean;
     By: Wanted
 * function MouseItem(Slot: Integer; TypeC: ClickActions; CheckIT: Boolean): Boolean;
     By: Wanted
 * function DragItem(FromSlot, ToSlot: Integer; CheckIT: Boolean): Boolean;
     By: Wanted  
 * function GetDropPattern(Which: Integer): TIntegerArray;
     By: Wanted
 * function DropItem(Slot: Integer; CheckIT: Boolean): Boolean;
     By: Wanted
 * function DropItemsPEx(Slots, Pattern: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
     By: Wanted
 * function DropItemsEx(Slots: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
     By: Wanted
 * function DropItems(Slots: TIntegerArray; CheckIT: Boolean): Integer;
     By: Wanted
 * function DropAllExclude(Exclude: TIntegerArray; CheckIT: Boolean): Integer;
     By: Wanted
 * function DropAll(CheckIT: Boolean): Integer;
     By: Wanted
 * function FindInvItemsDTM(dtm: Integer; CheckIT: Boolean): TIntegerArray;
     By: Wanted
 * function CountInvItemsDTM(dtm: Integer; CheckIT: Boolean): Integer;
     By: Wanted
 * function FindInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): TIntegerArray;
     By: Wanted
 * function CountInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): Integer;
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetAllInvSlotBounds: TBoxArray;
Contributors: Wanted
Description: Returns all item boundries.
Date Created: March 8th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetAllInvSlotBounds: TBoxArray;
begin
  Result := TBAFromGrid(Point(563, 213), 31, 31, 7, 4, 36, 42);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvSlotsBounds: TBox;
Contributors: Wanted
Description: Returns all box around all itmes.
Date Created: March 8th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvSlotsBounds: TBox;
begin
  Result := TBABounds(GetAllInvSlotBounds);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetInvSlotsBounds(Slots: TIntegerArray): TBoxArray;
Contributors: Wanted
Description: Returns the bounds of items in the inventory.
Last Modified: March 9th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 9th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetInvSlotsBounds(Slots: TIntegerArray): TBoxArray;
var
  I, H: Integer;
begin
  SetLength(Result, Length(Slots));
  H := High(Slots);
  for I := 0 to H do
    Result[I] := BoxFromGrid(Point(563, 213), Slots[I], 31, 31, 7, 4, 36, 42);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetInvSlotBounds(Slot: Integer): TBox;
Contributors: Wanted
Description: Returns the bounds of an item in the inventory.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 9th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetInvSlotBounds(Slot: Integer): TBox;
var
  TBA: TBoxArray;
begin
  TBA := GetInvSlotsBounds([Slot]);
  Result := TBA[0];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CordsToInvSlot(P: TPoint): Integer;
Contributors: Wanted
Description: Returns the slot of a point in the inventory.
Date Created: November 9th, 2011. By Wanted. RS2 Build 677.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CordsToInvSlot(P: TPoint): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 27 do
    if (PointInBox(P, GetInvSlotBounds(I))) then
    begin
      Result := I;
      Exit;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvItemExists(Slot: Integer; CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if there's an item in the given inventory slot.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvItemExists(Slot: Integer; CheckIT: Boolean): Boolean;
var
  P: TPoint;
begin
  Result := False;
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  Result := FindColorP(P, clObjectOutline, GetInvSlotBounds(Slot));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvCount(CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Returns the number of occupied spots by items in your inventory.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvCount(CheckIT: Boolean): Integer;
var
  I: Integer;
begin
  Result := 0;
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  for I := 0 to 27 do
    if (InvItemExists(I, False)) then
      Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvFull(CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if all 28 spots are full.
Date Created: November 18th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvFull(CheckIT: Boolean): Boolean;
begin
  Result := (InvCount(CheckIT) = 28);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvEmpty(CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if inventory is empty, slightly faster than InvCount = 0;
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvEmpty(CheckIT: Boolean): Boolean;
var
  P: TPoint;
begin
  Result := False;
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  Result := (not (FindColorP(P, clObjectOutline, InvSlotsBounds)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseItem(Slot: Integer; TypeC: ClickActions; CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Clicks on an item.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseItem(Slot: Integer; TypeC: ClickActions; CheckIT: Boolean): Boolean;
var
  B: TBox;
begin
  Result := InvItemExists(Slot, CheckIT);
  if (not (Result)) then
    Exit;
  B := GetInvSlotBounds(Slot);
  MouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, TypeC);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DragItem(FromSlot, ToSlot: Integer; CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Drags an item from one slot to another.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DragItem(FromSlot, ToSlot: Integer; CheckIT: Boolean): Boolean;
var
  B, B2: TBox;
begin
  Result := InvItemExists(FromSlot, CheckIT);
  if (not (Result)) then
    Exit;
  B := GetInvSlotBounds(FromSlot);
  B2 := GetInvSlotBounds(ToSlot);
  DragMouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, B2.X1 + 2, B2.Y1 + 2, B2.X2 - 2, B2.Y2 - 2, True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetDropPattern(Which: Integer): TIntegerArray;
Contributors: Wanted
Description: Returns a list of all invetory spaces in a drop order. See manual for details.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modified: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetDropPattern(Which: Integer): TIntegerArray;
begin
  if (not (InRange(Which, 0, 5))) then
    Which := Random(6);
  case Which of
    0: Result := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27];
    1: Result := [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16, 23, 22, 21, 20, 27, 26, 25, 24];
    2: Result := [0, 4, 8, 12, 16, 20, 24, 1, 5, 9, 13, 17, 21, 25, 2, 6, 10, 14, 18, 22, 26, 3, 7, 11, 15, 19, 23, 27];
    3: Result := [3, 7, 11, 15, 19, 23, 27, 2, 6, 10, 14, 18, 22, 26, 1, 5, 9, 13, 17, 21, 25, 0, 4, 8, 12, 16, 20, 24];
    4: Result := [0, 1, 2, 3, 7, 6, 5, 4, 8, 9, 10, 11, 15, 14, 13, 12, 16, 17, 18, 19, 23, 22, 21, 20, 24, 25, 26, 27];
    5: Result := [3, 2, 1, 0, 4, 5, 6, 7, 11, 10, 9, 8, 12, 13, 14, 15, 19, 18, 17, 16, 20, 21, 22, 23, 27, 26, 25, 24];
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItem(Slot: Integer; CheckIT: Boolean): Boolean;
Contributors: Wanted
Description: Drops the item in the selected slot if it exists, true if exists and done.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItem(Slot: Integer; CheckIT: Boolean): Boolean;
begin
  Result := False;
  if (not (MouseItem(Slot, ClickRight, CheckIT))) then
    Exit;
  Result := ChooseOptionMulti(['Drop ', 'rop ', 'Drop', 'rop']);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItemsPEx(Slots, Pattern: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Drops all the items in invetory except for those in excluded spaces
returns number of items dropped, or the other way around and drops items specified
if Exclude set to False. Use your own custom pattern or GetDropPattern.
Date Created: December 9th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItemsPEx(Slots, Pattern: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
var
  I: Integer;
begin
  Result := 0;  
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  for I := 0 to 27 do
    if ((TIAContains(Slots, Pattern[I])) xor (Exclude)) then
      if (DropItem(Pattern[I], False)) then
        Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItemsEx(Slots: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Drops all the items in invetory except for those in excluded spaces
returns number of items dropped, or the other way around and drops items specified
if Exclude set to False. Uses GetDropPattern(2) automatically for drop pattern.
Date Created: December 9th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItemsEx(Slots: TIntegerArray; Exclude, CheckIT: Boolean): Integer;
begin
  Result := DropItemsPEx(Slots, GetDropPattern(2), Exclude, CheckIT);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItems(Slots: TIntegerArray; CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Drops all the items in invetory specified returns number of items
dropped. Uses GetDropPattern(2).
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItems(Slots: TIntegerArray; CheckIT: Boolean): Integer;
begin
  Result := DropItemsEx(Slots, False, CheckIT);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropAllExclude(Exclude: TIntegerArray; CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Drops all the items in invetory except for those in excluded spaces
returns number of items dropped. Uses GetDropPattern(2)
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropAllExclude(Exclude: TIntegerArray; CheckIT: Boolean): Integer;
begin
  Result := DropItemsEx(Exclude, True, CheckIT);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropAll(CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Drops all the items in invetory and returns number of items dropped. Uses GetDropPattern(2).
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropAll(CheckIT: Boolean): Integer;
begin
  Result := DropAllExclude([], CheckIT);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindInvItemsDTM(dtm: Integer; CheckIT: Boolean): TIntegerArray;
Contributors: Wanted
Description: Returns all the slots where a dtm is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindInvItemsDTM(dtm: Integer; CheckIT: Boolean): TIntegerArray;
var
  I, L: Integer;
  P: TPoint;
begin
  Result := [];
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  for I := 0 to 27 do
    if (InvItemExists(I, False)) then
      if (FindDTMP(dtm, P, GetInvSlotBounds(I))) then
      begin
        Inc(L);
        SetLength(Result, L);
        Result[L - 1] := I;
      end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountInvItemsDTM(dtm: Integer; CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Returns the number of times an inventory dtm is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountInvItemsDTM(dtm: Integer; CheckIT: Boolean): Integer;
begin
  Result := Length(FindInvItemsDTM(dtm, CheckIT));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): TIntegerArray;
Contributors: Wanted
Description: Returns all the slots where a bmp is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 8th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): TIntegerArray;
var
  TPA: TPointArray;
  I, H: Integer;
begin
  Result := [];
  if (CheckIT) then
    if (not (SetGameTab(Tab_Inv))) then
      Exit;
  FindBitmapTolExP(TPA, bmp, MIB, Tol);
  H := High(TPA);
  if (H < 0) then
    Exit;
  SetLength(Result, H + 1);
  for I := 0 to H do
    Result[I] := CordsToInvSlot(TPA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): Integer;
Contributors: Wanted
Description: Returns the number of times an inventory bmp is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountInvItemsBMP(bmp, Tol: Integer; CheckIT: Boolean): Integer;
begin
  Result := Length(FindInvItemsBMP(bmp, Tol, CheckIT));
end;