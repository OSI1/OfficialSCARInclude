{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Runescape 07
                               Mini-Map Routines
--------------------------------------------------------------------------------
 * function OnMM(P: TPoint): Boolean;
     By: Wanted
 * function TPAOnMM(TPA: TPointArray): Boolean;
     By: Wanted
 * procedure TPAExtractMMPoints(var TPA: TPointArray);
     By: Wanted
 * function MMToMSEx(MM: TPoint; Height: Extended): TPoint;
     By: Wanted
 * function MMToMS(MM: TPoint): TPoint;
     By: Wanted
 * function MMOnMS(MM: TPoint): Boolean;
     By: Wanted
 * function MMsToMSs(TPA: TPointArray): TPointArray;
     By: Wanted
 * function FilterMMPointsMS(TPA: TPointArray): TPointArray;
     By: Wanted
 * function FindMMColorTol(var P: TPoint; Color, Tol: Integer): Boolean;
     By: Wanted
 * function FindMMColorsExTol(var TPA: TPointArray; Color, Tol: Integer): Boolean;
     By: Wanted
 * function FindMMColorSpiral(SP: TPoint; var P: TPoint; Color: Integer): Boolean;
     By: Wanted
 * function GetCompassAngleRadians: Extended;
     By: Wanted
 * function GetCompassAngleDegrees: Extended;
     By: Wanted
 * function SetCompassAngleEx(Angle, Accuracy: Extended; AdjustHeight, Highest: Boolean): Boolean;
     By: Wanted
 * function SetCompassAngleAcc(Angle, Acc: Extended): Boolean;
     By: Wanted
 * function SetCompassAngle(Angle: Extended): Boolean;
     By: Wanted
 * function SetCompassAngleAndHeight(Angle: Extended; Highest: Boolean): Boolean;
     By: Wanted
 * procedure SetScreenHeight(Highest: Boolean);
     By: Wanted
 * function FindFlag(var P: TPoint): Boolean;
     By: Wanted
 * function FlagExists: Boolean;
     By: Wanted
 * function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
     By: Wanted
 * function GetFlagDistance: Extended;
     By: Wanted
 * function FlagEx(Distance: Extended): Boolean;
     By: Wanted
 * function Flag: Boolean;
     By: Wanted
 * function MouseFlagEx(P: TPoint; RX, RY: Integer; Distance: Extended): Boolean;
     By: Wanted
 * function MouseFlag(P: TPoint; RX, RY: Integer): Boolean;
     By: Wanted
 * function FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
     By: Wanted
 * function FindMMDots(cldDot: Integer): TPointArray;
     By: Wanted
 * function CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
     By: Wanted
 * function CountMMDotsEx(ColorDiffs: TIntArray): Integer;
     By: Wanted
 * function CountMMDots(cldDot: Integer): Integer;
     By: Wanted
 * function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
     By: Wanted
 * function IsRunning: Boolean;
     By: Wanted
 * function ToggleRunEx(Run: Boolean; MinEnergy: Integer): Boolean;
     By: Wanted
 * function ToggleRun(Run: Boolean): Boolean;
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
  
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OnMM(P: TPoint): Boolean;
Contributors: Wanted
Description: Returns true if point is on the minimap.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
  
function OnMM(P: TPoint): Boolean;
begin
  Result := TPAContains(MMTPA, P);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAOnMM(TPA: TPointArray): Boolean;
Contributors: Wanted
Description: Returns true if all points are on the minimap.
Date Created: March 7th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
  
function TPAOnMM(TPA: TPointArray): Boolean;
var
  I, H: LongInt;
begin
  Result := False;
  H := High(TPA);
  for I := 0 to H do
    if (not (TPAContains(MMTPA, TPA[I]))) then
      Exit;
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAExtractMMPoints(var TPA: TPointArray);
Contributors: Wanted
Description: Removes all points from TPA not on MM.
Date Created: March 7th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPAExtractMMPoints(var TPA: TPointArray);
begin
  TPAExtractPoints(TPA, MMTPA);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMToMSEx(MM: TPoint; Height: Extended): TPoint;
Contributors: Home, Wanted.
Description: Transforms a point on the minimap to where it would be on the mainscreen.
Date Created: December 5th, 2011. By Home. RS2 Build 688.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMToMSEx(MM: TPoint; Height: Extended): TPoint;
var
  X, Y: Extended;
begin
  X := (((MM.X - MMCX) * 6.375) + MSCX);
  Y := (((MM.Y - MMCY) * 6.2857142857142857142857142857143) + MSCY);
  Result := Point(Round(X), Round(Y - Height));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMToMS(MM: TPoint): TPoint;
Contributors: Home
Description: Transforms a point on the minimap to where it would be on the mainscreen.
Date Created: December 5th, 2011. By Home. RS2 Build 688.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMToMS(MM: TPoint): TPoint;
begin
 Result := MMToMSEx(MM, 0);
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMOnMS(MM: TPoint): Boolean;
Contributors: Wanted
Description: Returns true if a MM point would be on the MS.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMOnMS(MM: TPoint): Boolean;
begin
  Result := PointInBox(MMToMS(MM), MSB);
end;  

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMsToMSs(TPA: TPointArray): TPointArray;
Contributors: Wanted
Description: Outputs MM points that are on MS as MS points.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMsToMSs(TPA: TPointArray): TPointArray;
var
  I, H, L: Integer;
  P: TPoint;
begin
  H := High(TPA);
  L := 0;
  for I := 0 to H do
  begin
    P := MMToMS(TPA[I]);
    if (not (PointInBox(P, MSB))) then
      Continue;
    Inc(L);
    SetLength(Result, L);
    Result[L - 1] := P;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FilterMMPointsMS(TPA: TPointArray): TPointArray;
Contributors: Wanted
Description: Filters out points that would not be on the main screen. Returns MM points.
Date Created: December 22nd, 2011. By Wanted. RS2 Build 690.
Last Modified: December 22nd, 2011. By Wanted. RS2 Build 690.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FilterMMPointsMS(TPA: TPointArray): TPointArray;
var
  I, H, L: Integer;
begin
  Result := [];
  H := High(TPA);
  L := 0;
  for I := 0 to H do
  begin
    if (not (MMOnMS(TPA[I]))) then
      Continue;
    Inc(L);
    SetLength(Result, L);
    Result[L - 1] := TPA[I];
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorTol(var P: TPoint; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds color within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorTol(var P: TPoint; Color, Tol: Integer): Boolean;
begin
  Result := FindColorTPATolP(P, Color, MMTPA, Tol);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorsExTol(var TPA: TPointArray; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds colors within minimap circle with tolerance.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modified: March 7th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorsExTol(var TPA: TPointArray; Color, Tol: Integer): Boolean;
begin
  Result := FindColorTPATolExP(TPA, Color, MMTPA, Tol);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorSpiral(SP: TPoint; var P: TPoint; Color: Integer): Boolean;
Contributors: Wanted
Description: Finds color within minimap circle nearest SP.
Date Created: March 14th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 14th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorSpiral(SP: TPoint; var P: TPoint; Color: Integer): Boolean;
begin
  Result := FindColorSpiralTPA(SP, P, Color, MMTPA);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleRadians: Extended;
Contributors: Wanted
Description: Gets the compass angle in radians.
Date Created: November 22nd, 2011. By Wanted. RS2 Build 682.
Last Modified: March 14th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleRadians: Extended;
var
  TPA: TPointArray;
  P: TPoint;
begin
  FindColorExP(TPA, clCompassN, CMB);  
  TPAExtractDist(TPA, 0, CMPRe, CMCXe, CMCYe);
  if (Length(TPA) < 1) then
    Exit;
  P := TPAMean(TPA);
  Result := (ArcTan2(-(P.Y - CMCX), P.X - CMCY) - (Pi / 2));
  if (Result < 0) then
    IncE(Result, (Pi * 2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleDegrees: Extended;
Contributors: Wanted
Description: Gets the compass angle in degrees.
Date Created: August 6th, 2011. By Wanted. RS2 Build 660.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(GetCompassAngleRadians);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetCompassAngleEx(Angle, Accuracy: Extended; AdjustHeight, Highest: Boolean): Boolean;
Contributors: Wanted, Naum. 
Description: Rotates the compass using the arrow keys to the desired angle. If
             AdjustHeight then it will  simultaneously do so while adjusting 
             compass angle. Returns true if final angle is within Acc of Angle.
Date Created: March 13th, 2013. By Wanted. RS07 Build ???.
Last Modified: October 26th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetCompassAngleEx(Angle, Accuracy: Extended; AdjustHeight, Highest: Boolean): Boolean;
var
  CurrentAngle, PreviousDifference, CurrentDifference: Extended;
  CounterClockwise, FirstAttempt, SKeyDown: Boolean;
  T, AHT: LongInt;
begin
  FixD(Angle);
  CurrentAngle := GetCompassAngleDegrees;
  Result := ((MinE(Abs(CurrentAngle - Angle), MinE(Abs(CurrentAngle - (Angle + 360.0)), Abs((CurrentAngle + 360.0) - Angle)))) <= Accuracy);
  SetTimer(T, 12000, 14000); 
  FirstAttempt := True;
  SKeyDown := False;
  repeat    
    if (AdjustHeight) then
      if (FirstAttempt) then
      begin
        FirstAttempt := False;
        SetTimer(AHT, 1351, 1621) 
        VKeyDown((Integer(not Highest) * 2) + 38); 
        SKeyDown := True;
      end;
    if (Result) then
    begin
      if (SKeyDown) then
      begin
        while (not (CheckTimer(AHT))) do
          WaitRR(10, 35);
        VKeyUp((Integer(not Highest) * 2) + 38);
      end; 
      Exit;
    end;
    CounterClockWise := (Round((360 - CurrentAngle) + Angle) mod 360 <= Round((CurrentAngle + 360) - Angle) mod 360);
    PreviousDifference := 999999.9;       
    VKeyDown((Integer(not CounterClockWise) * 2) + 37);
    repeat
      Wait(1);
      if (SKeyDown) then
        if (CheckTimer(AHT)) then
        begin
          VKeyUp((Integer(not Highest) * 2) + 38);
          SKeyDown := False;
        end;  
      CurrentAngle := GetCompassAngleDegrees;
      CurrentDifference := ((MinE(Abs(CurrentAngle - Angle), MinE(Abs(CurrentAngle - (Angle + 360.0)), Abs((CurrentAngle + 360.0) - Angle)))));
      if (CurrentDifference <= Accuracy) then
      begin
        Result := True;
        Break;
      end;
      if (CurrentDifference > PreviousDifference) then
        if (Abs(CurrentDifference - PreviousDifference) > (Accuracy * 2)) then  
          Break;
      PreviousDifference := CurrentDifference;
    until (CheckTimer(T));
    VKeyUp((Integer(not CounterClockWise) * 2) + 37);
    if (SKeyDown) then
      if (CheckTimer(AHT)) then
      begin
        VKeyUp((Integer(not Highest) * 2) + 38);
        SKeyDown := False;
      end;
    WaitRR(300, 400);
  until (CheckTimer(T));
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetCompassAngleAcc(Angle, Acc: Extended): Boolean;
Contributors: Wanted
Description: Rotates the compass using the arrow keys to the desired angle.
             Returns true if final angle is within Acc of Angle.
Date Created: March 13th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 13th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetCompassAngleAcc(Angle, Acc: Extended): Boolean;
begin
  Result := SetCompassAngleEx(Angle, Acc, False, False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetCompassAngle(Angle: Extended): Boolean;
Contributors: Wanted, Janilabo, Slakcy.
Description: Rotates the compass using the arrow keys to the desired angle.
             Returns true if final angle is within 2.5 degrees of Angle.
Date Created: November 4th, 2011. By Wanted. RS2 Build 675.
Last Modified: March 13th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetCompassAngle(Angle: Extended): Boolean;
begin
  Result := SetCompassAngleEx(Angle, 2.5, False, False);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SetCompassAngleAndHeight(Angle: Extended; Highest: Boolean): Boolean;
Contributors: Wanted, Naum, Janilabo, Slakcy, Freddy.
Description: Rotates the compass using the arrow keys to the desired angle.
             Simultaneously adjusting screen hieght while adjusting compass angle.
             Returns true if final angle is within 2.5 degrees of Angle.
Date Created: March 13th, 2013. By Wanted. RS07 Build ???.
Last Modified: March 13th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SetCompassAngleAndHeight(Angle: Extended; Highest: Boolean): Boolean;
begin
  Result := SetCompassAngleEx(Angle, 2.5, True, Highest);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SetScreenHeight(Highest: Boolean);
Contributors: Naum, Wanted, Freddy.
Description: Tilts the camera angle.
Date Created: August 6th, 2011. By Naum. RS2 Build 660.
Last Modified: October 27th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SetScreenHeight(Highest: Boolean);
begin
  HoldVKey((Integer(not Highest) * 2) + 38, 1351, 1621);
  WaitRR(400, 600);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindFlag(var X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if flag exists and the cord of the lowest point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: March 14th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindFlag(var P: TPoint): Boolean;
begin
  Result := FindMMColorSpiral(Point(MMCX, MMY2), P, clFlag);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagExists: Boolean;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: December 6th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagExists: Boolean;
var
  P: TPoint;
begin
  Result := FindFlag(P);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
Contributors: Wanted
Description: Returns flag distance from point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
var
  P: TPoint;
begin
  Result := 0.0;
  if (not (FindFlag(P))) then
  begin
    Result := 0;
    Exit;
  end;
  Result := DistanceEx(FromX, FromY, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistance: Extended;
Contributors: Wanted
Description: Returns flag distance from your location (MMCX, MMCY).
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistance: Extended;
begin
  Result := GetFlagDistanceEx(MMCX, MMCY);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagEx(Distance: Extended): Boolean;
Contributors: Wanted
Description: Waits until your within Distance of flag. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 26th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagEx(Distance: Extended): Boolean;
var
  T: LongInt;
begin
  Result := False;
  SetTimer(T, 35000, 45000); 
  while (GetFlagDistance > Distance) do
  begin
    if (CheckTimer(T)) then
    begin  
      MouseP(MMCP, 0, 0, True);
      Exit;
    end;
    WaitRR(100, 200);
  end;
  Result := True;
  if (Distance < 5) then 
      WaitRR(700 - Round(Distance * 140), 800 - Round(Distance * 160));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Flag: Boolean;
Contributors: Wanted
Description: Waits until you're done moving. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Flag: Boolean;
begin
  Result := FlagEx(0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlagEx(P: TPoint; RX, RY: Integer; Distance: Extended): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does FlagEx.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlagEx(P: TPoint; RX, RY: Integer; Distance: Extended): Boolean;
var
  MP: TPoint;
begin
  Result := False;
  MP := RRectanglePoint(P.X - RX, P.Y - RY, P.X + RX, P.Y + RY);
  if (PointInBox(MP, Box(MMCX - 1, MMCY - 1, MMCX + 1, MMCY + 2))) then
    Exit;
  if (not (OnMM(MP))) then
    Exit;
  MouseP(MP, 0, 0, True);
  if (not (WaitFunc(@FlagExists, True, 100, 200, 4000, 5000))) then
    Exit;
  Result := FlagEx(Distance);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlag(P: TPoint; RX, RY: Integer): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does Flag.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modified: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlag(P: TPoint; RX, RY: Integer): Boolean;
begin
  Result := MouseFlagEx(P, RX, RY, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
Contributors: Wanted, Freddy.
Description: Finds all MMDots you specify i.e. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: November 9th, 2013. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMDotsEx(ColorDiffs: TIntArray): T2DPointArray;
var
  I, II, H, HH, C: Integer; 
  bmpRunescape: TSCARBitmap;
  TPA: TPointArray;
  L: TIntArray;
begin
  Result := [TPointArray([])];
  HH := High(ColorDiffs); 
  if (HH < 0) then
    Exit;
  SetLength(Result, HH + 1);
  SetLength(L, HH + 1);
  bmpRunescape := GetClient.CaptureEx(RSX1, RSY1, RSX2, RSY2);
  FindBitmapColorTPAEx(TPA, 65536, bmpRunescape, MMTPA);
  H := High(TPA);
    if (H > 0) then
      for I := 0 to H do
      begin
        C := (bmpRunescape.Pixel[TPA[I].X - 2, TPA[I].Y] - bmpRunescape.Pixel[TPA[I].X - 1, TPA[I].Y]);
        for II := 0 to HH do
          if (C = ColorDiffs[II]) then
          begin
            Inc(L[II]);
            SetLength(Result[II], L[II]);
            Result[II][L[II] - 1] := Point(TPA[I].X - 2, TPA[I].Y - 2);
            Break;
          end;
      end;
  bmpRunescape.Free
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMDots(cldDot: Integer): TPointArray;
Contributors: Wanted
Description: Finds all of the MMDot that you specify i.e. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMDots(cldDot: Integer): TPointArray;
var
  ATPA: T2DPointArray;
begin
  ATPA := FindMMDotsEx([cldDot]);
  Result := ATPA[0];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
Contributors: Wanted, Freddy.
Description: Counts all the dots of different colors you specify. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDotsEx2(ColorDiffs: TIntArray): TIntArray;
var
  ATPA: T2DPointArray;
  I, H: Integer;
begin
  H := High(ColorDiffs);
  SetLength(Result, H + 1);
  ATPA := FindMMDotsEx(ColorDiffs);
  for I := 0 to H do
    Result[I] := Length(ATPA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDotsEx(ColorDiffs: TIntArray): Integer;
Contributors: Wanted, Freddy.
Description: Counts all the dots of different colors you specify. And then adds
them together for a total number. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDotsEx(ColorDiffs: TIntArray): Integer;
var
  TIA: TIntArray;
  I, H: Integer;
begin
  Result := 0;
  TIA := CountMMDotsEx2(ColorDiffs);
  H := High(TIA);
  for I := 0 to H do
    IncEx(Result, TIA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountMMDots(cldDot: Integer): Integer;
Contributors: Wanted
Description: Counts all the dots of the color you specify. cldWhiteDot etc. see Global.scar
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modified: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountMMDots(cldDot: Integer): Integer;
begin
  Result := CountMMDotsEx([cldDot]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: Turns a road TPA into a pie slice, finds the middle and offsets,
and finally walks to it. See the online manual and forums for help using correctly.
Date Created: November 3rd, 2011. By Wanted. RS2 Build 674.
Last Modified: November 3rd, 2011. By Wanted. RS2 Build 674.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
var
  ATPA: T2DPointArray;
  P: TPoint;
begin
  Result := False;
  TPAExtractSlice(TPA, SRad, ERad, SAng, EAng, MMCP);  
  ATPA := SplitTPA(TPA, 3);
  SortATPASize(ATPA, True);
  if (Length(ATPA) < 1) then
    Exit;
  TPA := ATPA[0];
  P := TPAMean(TPA);
  IncEx(P.X, XOffset);
  IncEx(P.Y, YOffset);
  Result := MouseFlagEx(P, RX, RY, FlagD);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function IsRunning: Boolean;
Contributors: Wanted
Description: Returns true if running.
Date Created: September 5th, 2011. By Wanted. RS2 Build 663.
Last Modified: October 27th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function IsRunning: Boolean;
begin
  Result := SimilarColors(6806252, GetColor(581, 141), 10);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ToggleRunEx(Run: Boolean; MinEnergy: Integer): Boolean;
Contributors: Wanted
Description: Sets run to desired state. True if state was changed.
Date Created: October 27th, 2014. By Wanted. RS07 Build ???.
Last Modified: October 27th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ToggleRunEx(Run: Boolean; MinEnergy: Integer): Boolean;
begin
  Result := False;
  if (GetMMLevel(Skill_Run) < MinEnergy) then
    Exit;
  Result := ((IsRunning) xor (Run));
  if (Result) then
    if (Random(2) = 1) then
      MouseCircle(9, 581, 139, ClickLeft)
    else
      MouseBox(547, 135, 573, 148, ClickLeft);
  WaitFunc(@IsRunning, False, 50, 150, 1500, 2500);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ToggleRun(Run: Boolean): Boolean;
Contributors: Wanted
Description: Sets run to desired state. True if state was changed.
Date Created: October 27th, 2014. By Wanted. RS07 Build ???.
Last Modified: October 27th, 2014. By Wanted. RS07 Build ???.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ToggleRun(Run: Boolean): Boolean;
begin
  Result := ToggleRunEx(Run, 1);
end;